//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="NetworkServiceBinding", Namespace="urn:NetworkService")]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(DNSDelegatedKey))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(NetNameTuple))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(ObservedSwitchConnection))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(Connection))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(SwitchPort))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(InetInfo))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(BulkInterfaceAuto))]
[System.Xml.Serialization.SoapIncludeAttribute(typeof(InterfaceInformation))]
public partial class SOAPNetworkService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback getAuthTokenOperationCompleted;
    
    private Auth authValueField;
    
    private System.Threading.SendOrPostCallback searchDeviceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getDeviceBasicInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getDeviceInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getDeviceInfoArrayOperationCompleted;
    
    private System.Threading.SendOrPostCallback getDeviceInfoFromNameMACOperationCompleted;
    
    private System.Threading.SendOrPostCallback getMyDeviceInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getLastChangedDevicesOperationCompleted;
    
    private System.Threading.SendOrPostCallback bulkInsertOperationCompleted;
    
    private System.Threading.SendOrPostCallback bulkInsertAutoOperationCompleted;
    
    private System.Threading.SendOrPostCallback bulkRemoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceInsertOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceAddCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceAddBulkInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceRemoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceRemoveCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceRemoveBulkInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceMoveBulkInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceGlobalRenameOperationCompleted;
    
    private System.Threading.SendOrPostCallback setHCPResponseOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceUpdateIPv6ReadyOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceUpdateManagerLockOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceSetBOOTPInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceRemoveBOOTPInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getBOOTPInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getBulkInterfaceInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback setInsertAddressOperationCompleted;
    
    private System.Threading.SendOrPostCallback setInsertServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback setDeleteAddressOperationCompleted;
    
    private System.Threading.SendOrPostCallback setDeleteServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSetNameFromIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSetAllInterfacesOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSetInterfacesTrustingOperationCompleted;
    
    private System.Threading.SendOrPostCallback getHCPInfoArrayOperationCompleted;
    
    private System.Threading.SendOrPostCallback getDevicesFromServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSwitchesFromServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSwitchInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback getConnectionsFromDeviceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getOutletLocationFromSwitchPortOperationCompleted;
    
    private System.Threading.SendOrPostCallback getCurrentConnectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback getMyCurrentConnectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback enableFanOutFromSwitchPortOperationCompleted;
    
    private System.Threading.SendOrPostCallback bindUnbindInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceAddAliasOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceRemoveAliasOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceMoveAliasOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceRenameOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceMoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback searchSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback setInsertOperationCompleted;
    
    private System.Threading.SendOrPostCallback setRemoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback setSwitchPortTypeStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback setSwitchPortMediumOperationCompleted;
    
    private System.Threading.SendOrPostCallback setSwitchPortServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback getSwitchPortTypeStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback searchNetNameTableOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceAddLogicalInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback deviceRemoveLogicalInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback interfaceUpdateDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback serviceUpdateDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback getServiceInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmMigrateOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmDestroyOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmClusterGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmClusterGetDevicesOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmGetClusterMembershipOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmSearchClusterOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmAddInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmRemoveInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmMoveInterfaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmAddCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback vmRemoveCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsZoneUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedSearchOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedGetByNameViewOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedAddOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedListKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedRemoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedAliasAddOperationCompleted;
    
    private System.Threading.SendOrPostCallback dnsDelegatedAliasRemoveOperationCompleted;
    
    /// <remarks/>
    public SOAPNetworkService() {
        this.Url = "https://network.cern.ch/sc/soap/soap.fcgi?v=6";
    }
    
    public Auth AuthValue {
        get {
            return this.authValueField;
        }
        set {
            this.authValueField = value;
        }
    }
    
    /// <remarks/>
    public event getAuthTokenCompletedEventHandler getAuthTokenCompleted;
    
    /// <remarks/>
    public event searchDeviceCompletedEventHandler searchDeviceCompleted;
    
    /// <remarks/>
    public event getDeviceBasicInfoCompletedEventHandler getDeviceBasicInfoCompleted;
    
    /// <remarks/>
    public event getDeviceInfoCompletedEventHandler getDeviceInfoCompleted;
    
    /// <remarks/>
    public event getDeviceInfoArrayCompletedEventHandler getDeviceInfoArrayCompleted;
    
    /// <remarks/>
    public event getDeviceInfoFromNameMACCompletedEventHandler getDeviceInfoFromNameMACCompleted;
    
    /// <remarks/>
    public event getMyDeviceInfoCompletedEventHandler getMyDeviceInfoCompleted;
    
    /// <remarks/>
    public event getLastChangedDevicesCompletedEventHandler getLastChangedDevicesCompleted;
    
    /// <remarks/>
    public event bulkInsertCompletedEventHandler bulkInsertCompleted;
    
    /// <remarks/>
    public event bulkInsertAutoCompletedEventHandler bulkInsertAutoCompleted;
    
    /// <remarks/>
    public event bulkRemoveCompletedEventHandler bulkRemoveCompleted;
    
    /// <remarks/>
    public event deviceInsertCompletedEventHandler deviceInsertCompleted;
    
    /// <remarks/>
    public event deviceAddCardCompletedEventHandler deviceAddCardCompleted;
    
    /// <remarks/>
    public event deviceAddBulkInterfaceCompletedEventHandler deviceAddBulkInterfaceCompleted;
    
    /// <remarks/>
    public event deviceRemoveCompletedEventHandler deviceRemoveCompleted;
    
    /// <remarks/>
    public event deviceRemoveCardCompletedEventHandler deviceRemoveCardCompleted;
    
    /// <remarks/>
    public event deviceRemoveBulkInterfaceCompletedEventHandler deviceRemoveBulkInterfaceCompleted;
    
    /// <remarks/>
    public event deviceMoveBulkInterfaceCompletedEventHandler deviceMoveBulkInterfaceCompleted;
    
    /// <remarks/>
    public event deviceUpdateCompletedEventHandler deviceUpdateCompleted;
    
    /// <remarks/>
    public event deviceGlobalRenameCompletedEventHandler deviceGlobalRenameCompleted;
    
    /// <remarks/>
    public event setHCPResponseCompletedEventHandler setHCPResponseCompleted;
    
    /// <remarks/>
    public event deviceUpdateIPv6ReadyCompletedEventHandler deviceUpdateIPv6ReadyCompleted;
    
    /// <remarks/>
    public event deviceUpdateManagerLockCompletedEventHandler deviceUpdateManagerLockCompleted;
    
    /// <remarks/>
    public event deviceSetBOOTPInfoCompletedEventHandler deviceSetBOOTPInfoCompleted;
    
    /// <remarks/>
    public event deviceRemoveBOOTPInfoCompletedEventHandler deviceRemoveBOOTPInfoCompleted;
    
    /// <remarks/>
    public event getBOOTPInfoCompletedEventHandler getBOOTPInfoCompleted;
    
    /// <remarks/>
    public event getBulkInterfaceInfoCompletedEventHandler getBulkInterfaceInfoCompleted;
    
    /// <remarks/>
    public event setInsertAddressCompletedEventHandler setInsertAddressCompleted;
    
    /// <remarks/>
    public event setInsertServiceCompletedEventHandler setInsertServiceCompleted;
    
    /// <remarks/>
    public event setDeleteAddressCompletedEventHandler setDeleteAddressCompleted;
    
    /// <remarks/>
    public event setDeleteServiceCompletedEventHandler setDeleteServiceCompleted;
    
    /// <remarks/>
    public event getSetInfoCompletedEventHandler getSetInfoCompleted;
    
    /// <remarks/>
    public event getSetNameFromIDCompletedEventHandler getSetNameFromIDCompleted;
    
    /// <remarks/>
    public event getSetAllInterfacesCompletedEventHandler getSetAllInterfacesCompleted;
    
    /// <remarks/>
    public event getSetInterfacesTrustingCompletedEventHandler getSetInterfacesTrustingCompleted;
    
    /// <remarks/>
    public event getHCPInfoArrayCompletedEventHandler getHCPInfoArrayCompleted;
    
    /// <remarks/>
    public event getDevicesFromServiceCompletedEventHandler getDevicesFromServiceCompleted;
    
    /// <remarks/>
    public event getSwitchesFromServiceCompletedEventHandler getSwitchesFromServiceCompleted;
    
    /// <remarks/>
    public event getSwitchInfoCompletedEventHandler getSwitchInfoCompleted;
    
    /// <remarks/>
    public event getConnectionsFromDeviceCompletedEventHandler getConnectionsFromDeviceCompleted;
    
    /// <remarks/>
    public event getOutletLocationFromSwitchPortCompletedEventHandler getOutletLocationFromSwitchPortCompleted;
    
    /// <remarks/>
    public event getCurrentConnectionCompletedEventHandler getCurrentConnectionCompleted;
    
    /// <remarks/>
    public event getMyCurrentConnectionCompletedEventHandler getMyCurrentConnectionCompleted;
    
    /// <remarks/>
    public event enableFanOutFromSwitchPortCompletedEventHandler enableFanOutFromSwitchPortCompleted;
    
    /// <remarks/>
    public event bindUnbindInterfaceCompletedEventHandler bindUnbindInterfaceCompleted;
    
    /// <remarks/>
    public event interfaceAddAliasCompletedEventHandler interfaceAddAliasCompleted;
    
    /// <remarks/>
    public event interfaceRemoveAliasCompletedEventHandler interfaceRemoveAliasCompleted;
    
    /// <remarks/>
    public event interfaceMoveAliasCompletedEventHandler interfaceMoveAliasCompleted;
    
    /// <remarks/>
    public event interfaceRenameCompletedEventHandler interfaceRenameCompleted;
    
    /// <remarks/>
    public event interfaceMoveCompletedEventHandler interfaceMoveCompleted;
    
    /// <remarks/>
    public event searchSetCompletedEventHandler searchSetCompleted;
    
    /// <remarks/>
    public event setInsertCompletedEventHandler setInsertCompleted;
    
    /// <remarks/>
    public event setRemoveCompletedEventHandler setRemoveCompleted;
    
    /// <remarks/>
    public event setSwitchPortTypeStatusCompletedEventHandler setSwitchPortTypeStatusCompleted;
    
    /// <remarks/>
    public event setSwitchPortMediumCompletedEventHandler setSwitchPortMediumCompleted;
    
    /// <remarks/>
    public event setSwitchPortServiceCompletedEventHandler setSwitchPortServiceCompleted;
    
    /// <remarks/>
    public event getSwitchPortTypeStatusCompletedEventHandler getSwitchPortTypeStatusCompleted;
    
    /// <remarks/>
    public event searchNetNameTableCompletedEventHandler searchNetNameTableCompleted;
    
    /// <remarks/>
    public event deviceAddLogicalInterfaceCompletedEventHandler deviceAddLogicalInterfaceCompleted;
    
    /// <remarks/>
    public event deviceRemoveLogicalInterfaceCompletedEventHandler deviceRemoveLogicalInterfaceCompleted;
    
    /// <remarks/>
    public event interfaceUpdateDescriptionCompletedEventHandler interfaceUpdateDescriptionCompleted;
    
    /// <remarks/>
    public event serviceUpdateDescriptionCompletedEventHandler serviceUpdateDescriptionCompleted;
    
    /// <remarks/>
    public event getServiceInfoCompletedEventHandler getServiceInfoCompleted;
    
    /// <remarks/>
    public event vmCreateCompletedEventHandler vmCreateCompleted;
    
    /// <remarks/>
    public event vmMigrateCompletedEventHandler vmMigrateCompleted;
    
    /// <remarks/>
    public event vmUpdateCompletedEventHandler vmUpdateCompleted;
    
    /// <remarks/>
    public event vmDestroyCompletedEventHandler vmDestroyCompleted;
    
    /// <remarks/>
    public event vmClusterGetInfoCompletedEventHandler vmClusterGetInfoCompleted;
    
    /// <remarks/>
    public event vmClusterGetDevicesCompletedEventHandler vmClusterGetDevicesCompleted;
    
    /// <remarks/>
    public event vmGetInfoCompletedEventHandler vmGetInfoCompleted;
    
    /// <remarks/>
    public event vmGetClusterMembershipCompletedEventHandler vmGetClusterMembershipCompleted;
    
    /// <remarks/>
    public event vmSearchClusterCompletedEventHandler vmSearchClusterCompleted;
    
    /// <remarks/>
    public event vmAddInterfaceCompletedEventHandler vmAddInterfaceCompleted;
    
    /// <remarks/>
    public event vmRemoveInterfaceCompletedEventHandler vmRemoveInterfaceCompleted;
    
    /// <remarks/>
    public event vmMoveInterfaceCompletedEventHandler vmMoveInterfaceCompleted;
    
    /// <remarks/>
    public event vmAddCardCompletedEventHandler vmAddCardCompleted;
    
    /// <remarks/>
    public event vmRemoveCardCompletedEventHandler vmRemoveCardCompleted;
    
    /// <remarks/>
    public event dnsZoneUpdateCompletedEventHandler dnsZoneUpdateCompleted;
    
    /// <remarks/>
    public event dnsDelegatedSearchCompletedEventHandler dnsDelegatedSearchCompleted;
    
    /// <remarks/>
    public event dnsDelegatedGetByNameViewCompletedEventHandler dnsDelegatedGetByNameViewCompleted;
    
    /// <remarks/>
    public event dnsDelegatedAddCompletedEventHandler dnsDelegatedAddCompleted;
    
    /// <remarks/>
    public event dnsDelegatedListKeysCompletedEventHandler dnsDelegatedListKeysCompleted;
    
    /// <remarks/>
    public event dnsDelegatedRemoveCompletedEventHandler dnsDelegatedRemoveCompleted;
    
    /// <remarks/>
    public event dnsDelegatedAliasAddCompletedEventHandler dnsDelegatedAliasAddCompleted;
    
    /// <remarks/>
    public event dnsDelegatedAliasRemoveCompletedEventHandler dnsDelegatedAliasRemoveCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("token")]
    public string getAuthToken(string Login, string Password, string Type) {
        object[] results = this.Invoke("getAuthToken", new object[] {
                    Login,
                    Password,
                    Type});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAuthToken(string Login, string Password, string Type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAuthToken", new object[] {
                    Login,
                    Password,
                    Type}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndgetAuthToken(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void getAuthTokenAsync(string Login, string Password, string Type) {
        this.getAuthTokenAsync(Login, Password, Type, null);
    }
    
    /// <remarks/>
    public void getAuthTokenAsync(string Login, string Password, string Type, object userState) {
        if ((this.getAuthTokenOperationCompleted == null)) {
            this.getAuthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAuthTokenOperationCompleted);
        }
        this.InvokeAsync("getAuthToken", new object[] {
                    Login,
                    Password,
                    Type}, this.getAuthTokenOperationCompleted, userState);
    }
    
    private void OngetAuthTokenOperationCompleted(object arg) {
        if ((this.getAuthTokenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getAuthTokenCompleted(this, new getAuthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DeviceList")]
    public string[] searchDevice(DeviceSearch DeviceSearch) {
        object[] results = this.Invoke("searchDevice", new object[] {
                    DeviceSearch});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsearchDevice(DeviceSearch DeviceSearch, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("searchDevice", new object[] {
                    DeviceSearch}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndsearchDevice(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void searchDeviceAsync(DeviceSearch DeviceSearch) {
        this.searchDeviceAsync(DeviceSearch, null);
    }
    
    /// <remarks/>
    public void searchDeviceAsync(DeviceSearch DeviceSearch, object userState) {
        if ((this.searchDeviceOperationCompleted == null)) {
            this.searchDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchDeviceOperationCompleted);
        }
        this.InvokeAsync("searchDevice", new object[] {
                    DeviceSearch}, this.searchDeviceOperationCompleted, userState);
    }
    
    private void OnsearchDeviceOperationCompleted(object arg) {
        if ((this.searchDeviceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.searchDeviceCompleted(this, new searchDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Device")]
    public DeviceBasicInfo getDeviceBasicInfo(string DeviceName) {
        object[] results = this.Invoke("getDeviceBasicInfo", new object[] {
                    DeviceName});
        return ((DeviceBasicInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetDeviceBasicInfo(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getDeviceBasicInfo", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public DeviceBasicInfo EndgetDeviceBasicInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DeviceBasicInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getDeviceBasicInfoAsync(string DeviceName) {
        this.getDeviceBasicInfoAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void getDeviceBasicInfoAsync(string DeviceName, object userState) {
        if ((this.getDeviceBasicInfoOperationCompleted == null)) {
            this.getDeviceBasicInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceBasicInfoOperationCompleted);
        }
        this.InvokeAsync("getDeviceBasicInfo", new object[] {
                    DeviceName}, this.getDeviceBasicInfoOperationCompleted, userState);
    }
    
    private void OngetDeviceBasicInfoOperationCompleted(object arg) {
        if ((this.getDeviceBasicInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getDeviceBasicInfoCompleted(this, new getDeviceBasicInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Device")]
    public DeviceInfo getDeviceInfo(string DeviceName) {
        object[] results = this.Invoke("getDeviceInfo", new object[] {
                    DeviceName});
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetDeviceInfo(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getDeviceInfo", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public DeviceInfo EndgetDeviceInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getDeviceInfoAsync(string DeviceName) {
        this.getDeviceInfoAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void getDeviceInfoAsync(string DeviceName, object userState) {
        if ((this.getDeviceInfoOperationCompleted == null)) {
            this.getDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceInfoOperationCompleted);
        }
        this.InvokeAsync("getDeviceInfo", new object[] {
                    DeviceName}, this.getDeviceInfoOperationCompleted, userState);
    }
    
    private void OngetDeviceInfoOperationCompleted(object arg) {
        if ((this.getDeviceInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getDeviceInfoCompleted(this, new getDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DeviceInfoList")]
    public DeviceInfo[] getDeviceInfoArray(string[] DeviceNameList) {
        object[] results = this.Invoke("getDeviceInfoArray", new object[] {
                    DeviceNameList});
        return ((DeviceInfo[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetDeviceInfoArray(string[] DeviceNameList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getDeviceInfoArray", new object[] {
                    DeviceNameList}, callback, asyncState);
    }
    
    /// <remarks/>
    public DeviceInfo[] EndgetDeviceInfoArray(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DeviceInfo[])(results[0]));
    }
    
    /// <remarks/>
    public void getDeviceInfoArrayAsync(string[] DeviceNameList) {
        this.getDeviceInfoArrayAsync(DeviceNameList, null);
    }
    
    /// <remarks/>
    public void getDeviceInfoArrayAsync(string[] DeviceNameList, object userState) {
        if ((this.getDeviceInfoArrayOperationCompleted == null)) {
            this.getDeviceInfoArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceInfoArrayOperationCompleted);
        }
        this.InvokeAsync("getDeviceInfoArray", new object[] {
                    DeviceNameList}, this.getDeviceInfoArrayOperationCompleted, userState);
    }
    
    private void OngetDeviceInfoArrayOperationCompleted(object arg) {
        if ((this.getDeviceInfoArrayCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getDeviceInfoArrayCompleted(this, new getDeviceInfoArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Device")]
    public DeviceInfo getDeviceInfoFromNameMAC(string DeviceName, string MAC) {
        object[] results = this.Invoke("getDeviceInfoFromNameMAC", new object[] {
                    DeviceName,
                    MAC});
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetDeviceInfoFromNameMAC(string DeviceName, string MAC, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getDeviceInfoFromNameMAC", new object[] {
                    DeviceName,
                    MAC}, callback, asyncState);
    }
    
    /// <remarks/>
    public DeviceInfo EndgetDeviceInfoFromNameMAC(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getDeviceInfoFromNameMACAsync(string DeviceName, string MAC) {
        this.getDeviceInfoFromNameMACAsync(DeviceName, MAC, null);
    }
    
    /// <remarks/>
    public void getDeviceInfoFromNameMACAsync(string DeviceName, string MAC, object userState) {
        if ((this.getDeviceInfoFromNameMACOperationCompleted == null)) {
            this.getDeviceInfoFromNameMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceInfoFromNameMACOperationCompleted);
        }
        this.InvokeAsync("getDeviceInfoFromNameMAC", new object[] {
                    DeviceName,
                    MAC}, this.getDeviceInfoFromNameMACOperationCompleted, userState);
    }
    
    private void OngetDeviceInfoFromNameMACOperationCompleted(object arg) {
        if ((this.getDeviceInfoFromNameMACCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getDeviceInfoFromNameMACCompleted(this, new getDeviceInfoFromNameMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Device")]
    public DeviceInfo getMyDeviceInfo() {
        object[] results = this.Invoke("getMyDeviceInfo", new object[0]);
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetMyDeviceInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getMyDeviceInfo", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public DeviceInfo EndgetMyDeviceInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DeviceInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getMyDeviceInfoAsync() {
        this.getMyDeviceInfoAsync(null);
    }
    
    /// <remarks/>
    public void getMyDeviceInfoAsync(object userState) {
        if ((this.getMyDeviceInfoOperationCompleted == null)) {
            this.getMyDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyDeviceInfoOperationCompleted);
        }
        this.InvokeAsync("getMyDeviceInfo", new object[0], this.getMyDeviceInfoOperationCompleted, userState);
    }
    
    private void OngetMyDeviceInfoOperationCompleted(object arg) {
        if ((this.getMyDeviceInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getMyDeviceInfoCompleted(this, new getMyDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DeviceList")]
    public string[] getLastChangedDevices(int Minutes) {
        object[] results = this.Invoke("getLastChangedDevices", new object[] {
                    Minutes});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetLastChangedDevices(int Minutes, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getLastChangedDevices", new object[] {
                    Minutes}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndgetLastChangedDevices(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void getLastChangedDevicesAsync(int Minutes) {
        this.getLastChangedDevicesAsync(Minutes, null);
    }
    
    /// <remarks/>
    public void getLastChangedDevicesAsync(int Minutes, object userState) {
        if ((this.getLastChangedDevicesOperationCompleted == null)) {
            this.getLastChangedDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastChangedDevicesOperationCompleted);
        }
        this.InvokeAsync("getLastChangedDevices", new object[] {
                    Minutes}, this.getLastChangedDevicesOperationCompleted, userState);
    }
    
    private void OngetLastChangedDevicesOperationCompleted(object arg) {
        if ((this.getLastChangedDevicesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getLastChangedDevicesCompleted(this, new getLastChangedDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool bulkInsert(DeviceInput Device, InterfaceCard[] Cards, BulkInterface[] Interfaces) {
        object[] results = this.Invoke("bulkInsert", new object[] {
                    Device,
                    Cards,
                    Interfaces});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginbulkInsert(DeviceInput Device, InterfaceCard[] Cards, BulkInterface[] Interfaces, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("bulkInsert", new object[] {
                    Device,
                    Cards,
                    Interfaces}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndbulkInsert(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void bulkInsertAsync(DeviceInput Device, InterfaceCard[] Cards, BulkInterface[] Interfaces) {
        this.bulkInsertAsync(Device, Cards, Interfaces, null);
    }
    
    /// <remarks/>
    public void bulkInsertAsync(DeviceInput Device, InterfaceCard[] Cards, BulkInterface[] Interfaces, object userState) {
        if ((this.bulkInsertOperationCompleted == null)) {
            this.bulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbulkInsertOperationCompleted);
        }
        this.InvokeAsync("bulkInsert", new object[] {
                    Device,
                    Cards,
                    Interfaces}, this.bulkInsertOperationCompleted, userState);
    }
    
    private void OnbulkInsertOperationCompleted(object arg) {
        if ((this.bulkInsertCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.bulkInsertCompleted(this, new bulkInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool bulkInsertAuto(DeviceInput Device, InterfaceCard[] Cards, BulkInterfaceAuto[] Interfaces) {
        object[] results = this.Invoke("bulkInsertAuto", new object[] {
                    Device,
                    Cards,
                    Interfaces});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginbulkInsertAuto(DeviceInput Device, InterfaceCard[] Cards, BulkInterfaceAuto[] Interfaces, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("bulkInsertAuto", new object[] {
                    Device,
                    Cards,
                    Interfaces}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndbulkInsertAuto(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void bulkInsertAutoAsync(DeviceInput Device, InterfaceCard[] Cards, BulkInterfaceAuto[] Interfaces) {
        this.bulkInsertAutoAsync(Device, Cards, Interfaces, null);
    }
    
    /// <remarks/>
    public void bulkInsertAutoAsync(DeviceInput Device, InterfaceCard[] Cards, BulkInterfaceAuto[] Interfaces, object userState) {
        if ((this.bulkInsertAutoOperationCompleted == null)) {
            this.bulkInsertAutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbulkInsertAutoOperationCompleted);
        }
        this.InvokeAsync("bulkInsertAuto", new object[] {
                    Device,
                    Cards,
                    Interfaces}, this.bulkInsertAutoOperationCompleted, userState);
    }
    
    private void OnbulkInsertAutoOperationCompleted(object arg) {
        if ((this.bulkInsertAutoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.bulkInsertAutoCompleted(this, new bulkInsertAutoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool bulkRemove(string DeviceName) {
        object[] results = this.Invoke("bulkRemove", new object[] {
                    DeviceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginbulkRemove(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("bulkRemove", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndbulkRemove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void bulkRemoveAsync(string DeviceName) {
        this.bulkRemoveAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void bulkRemoveAsync(string DeviceName, object userState) {
        if ((this.bulkRemoveOperationCompleted == null)) {
            this.bulkRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbulkRemoveOperationCompleted);
        }
        this.InvokeAsync("bulkRemove", new object[] {
                    DeviceName}, this.bulkRemoveOperationCompleted, userState);
    }
    
    private void OnbulkRemoveOperationCompleted(object arg) {
        if ((this.bulkRemoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.bulkRemoveCompleted(this, new bulkRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceInsert(DeviceInput Device) {
        object[] results = this.Invoke("deviceInsert", new object[] {
                    Device});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceInsert(DeviceInput Device, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceInsert", new object[] {
                    Device}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceInsert(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceInsertAsync(DeviceInput Device) {
        this.deviceInsertAsync(Device, null);
    }
    
    /// <remarks/>
    public void deviceInsertAsync(DeviceInput Device, object userState) {
        if ((this.deviceInsertOperationCompleted == null)) {
            this.deviceInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceInsertOperationCompleted);
        }
        this.InvokeAsync("deviceInsert", new object[] {
                    Device}, this.deviceInsertOperationCompleted, userState);
    }
    
    private void OndeviceInsertOperationCompleted(object arg) {
        if ((this.deviceInsertCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceInsertCompleted(this, new deviceInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceAddCard(string DeviceName, InterfaceCard InterfaceCard) {
        object[] results = this.Invoke("deviceAddCard", new object[] {
                    DeviceName,
                    InterfaceCard});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceAddCard(string DeviceName, InterfaceCard InterfaceCard, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceAddCard", new object[] {
                    DeviceName,
                    InterfaceCard}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceAddCard(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceAddCardAsync(string DeviceName, InterfaceCard InterfaceCard) {
        this.deviceAddCardAsync(DeviceName, InterfaceCard, null);
    }
    
    /// <remarks/>
    public void deviceAddCardAsync(string DeviceName, InterfaceCard InterfaceCard, object userState) {
        if ((this.deviceAddCardOperationCompleted == null)) {
            this.deviceAddCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceAddCardOperationCompleted);
        }
        this.InvokeAsync("deviceAddCard", new object[] {
                    DeviceName,
                    InterfaceCard}, this.deviceAddCardOperationCompleted, userState);
    }
    
    private void OndeviceAddCardOperationCompleted(object arg) {
        if ((this.deviceAddCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceAddCardCompleted(this, new deviceAddCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceAddBulkInterface(string DeviceName, BulkInterface BulkInterface) {
        object[] results = this.Invoke("deviceAddBulkInterface", new object[] {
                    DeviceName,
                    BulkInterface});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceAddBulkInterface(string DeviceName, BulkInterface BulkInterface, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceAddBulkInterface", new object[] {
                    DeviceName,
                    BulkInterface}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceAddBulkInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceAddBulkInterfaceAsync(string DeviceName, BulkInterface BulkInterface) {
        this.deviceAddBulkInterfaceAsync(DeviceName, BulkInterface, null);
    }
    
    /// <remarks/>
    public void deviceAddBulkInterfaceAsync(string DeviceName, BulkInterface BulkInterface, object userState) {
        if ((this.deviceAddBulkInterfaceOperationCompleted == null)) {
            this.deviceAddBulkInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceAddBulkInterfaceOperationCompleted);
        }
        this.InvokeAsync("deviceAddBulkInterface", new object[] {
                    DeviceName,
                    BulkInterface}, this.deviceAddBulkInterfaceOperationCompleted, userState);
    }
    
    private void OndeviceAddBulkInterfaceOperationCompleted(object arg) {
        if ((this.deviceAddBulkInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceAddBulkInterfaceCompleted(this, new deviceAddBulkInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceRemove(string DeviceName) {
        object[] results = this.Invoke("deviceRemove", new object[] {
                    DeviceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceRemove(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceRemove", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceRemove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceRemoveAsync(string DeviceName) {
        this.deviceRemoveAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void deviceRemoveAsync(string DeviceName, object userState) {
        if ((this.deviceRemoveOperationCompleted == null)) {
            this.deviceRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceRemoveOperationCompleted);
        }
        this.InvokeAsync("deviceRemove", new object[] {
                    DeviceName}, this.deviceRemoveOperationCompleted, userState);
    }
    
    private void OndeviceRemoveOperationCompleted(object arg) {
        if ((this.deviceRemoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceRemoveCompleted(this, new deviceRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceRemoveCard(string DeviceName, string HardwareAddress) {
        object[] results = this.Invoke("deviceRemoveCard", new object[] {
                    DeviceName,
                    HardwareAddress});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceRemoveCard(string DeviceName, string HardwareAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceRemoveCard", new object[] {
                    DeviceName,
                    HardwareAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceRemoveCard(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceRemoveCardAsync(string DeviceName, string HardwareAddress) {
        this.deviceRemoveCardAsync(DeviceName, HardwareAddress, null);
    }
    
    /// <remarks/>
    public void deviceRemoveCardAsync(string DeviceName, string HardwareAddress, object userState) {
        if ((this.deviceRemoveCardOperationCompleted == null)) {
            this.deviceRemoveCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceRemoveCardOperationCompleted);
        }
        this.InvokeAsync("deviceRemoveCard", new object[] {
                    DeviceName,
                    HardwareAddress}, this.deviceRemoveCardOperationCompleted, userState);
    }
    
    private void OndeviceRemoveCardOperationCompleted(object arg) {
        if ((this.deviceRemoveCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceRemoveCardCompleted(this, new deviceRemoveCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceRemoveBulkInterface(string DeviceName, string InterfaceName) {
        object[] results = this.Invoke("deviceRemoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceRemoveBulkInterface(string DeviceName, string InterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceRemoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceRemoveBulkInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceRemoveBulkInterfaceAsync(string DeviceName, string InterfaceName) {
        this.deviceRemoveBulkInterfaceAsync(DeviceName, InterfaceName, null);
    }
    
    /// <remarks/>
    public void deviceRemoveBulkInterfaceAsync(string DeviceName, string InterfaceName, object userState) {
        if ((this.deviceRemoveBulkInterfaceOperationCompleted == null)) {
            this.deviceRemoveBulkInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceRemoveBulkInterfaceOperationCompleted);
        }
        this.InvokeAsync("deviceRemoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName}, this.deviceRemoveBulkInterfaceOperationCompleted, userState);
    }
    
    private void OndeviceRemoveBulkInterfaceOperationCompleted(object arg) {
        if ((this.deviceRemoveBulkInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceRemoveBulkInterfaceCompleted(this, new deviceRemoveBulkInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceMoveBulkInterface(string DeviceName, string InterfaceName, BulkInterface BulkInterface, BulkMoveOptions BulkMoveOptions) {
        object[] results = this.Invoke("deviceMoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName,
                    BulkInterface,
                    BulkMoveOptions});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceMoveBulkInterface(string DeviceName, string InterfaceName, BulkInterface BulkInterface, BulkMoveOptions BulkMoveOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceMoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName,
                    BulkInterface,
                    BulkMoveOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceMoveBulkInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceMoveBulkInterfaceAsync(string DeviceName, string InterfaceName, BulkInterface BulkInterface, BulkMoveOptions BulkMoveOptions) {
        this.deviceMoveBulkInterfaceAsync(DeviceName, InterfaceName, BulkInterface, BulkMoveOptions, null);
    }
    
    /// <remarks/>
    public void deviceMoveBulkInterfaceAsync(string DeviceName, string InterfaceName, BulkInterface BulkInterface, BulkMoveOptions BulkMoveOptions, object userState) {
        if ((this.deviceMoveBulkInterfaceOperationCompleted == null)) {
            this.deviceMoveBulkInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceMoveBulkInterfaceOperationCompleted);
        }
        this.InvokeAsync("deviceMoveBulkInterface", new object[] {
                    DeviceName,
                    InterfaceName,
                    BulkInterface,
                    BulkMoveOptions}, this.deviceMoveBulkInterfaceOperationCompleted, userState);
    }
    
    private void OndeviceMoveBulkInterfaceOperationCompleted(object arg) {
        if ((this.deviceMoveBulkInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceMoveBulkInterfaceCompleted(this, new deviceMoveBulkInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceUpdate(string DeviceName, DeviceInput DeviceInput) {
        object[] results = this.Invoke("deviceUpdate", new object[] {
                    DeviceName,
                    DeviceInput});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceUpdate(string DeviceName, DeviceInput DeviceInput, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceUpdate", new object[] {
                    DeviceName,
                    DeviceInput}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceUpdate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceUpdateAsync(string DeviceName, DeviceInput DeviceInput) {
        this.deviceUpdateAsync(DeviceName, DeviceInput, null);
    }
    
    /// <remarks/>
    public void deviceUpdateAsync(string DeviceName, DeviceInput DeviceInput, object userState) {
        if ((this.deviceUpdateOperationCompleted == null)) {
            this.deviceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceUpdateOperationCompleted);
        }
        this.InvokeAsync("deviceUpdate", new object[] {
                    DeviceName,
                    DeviceInput}, this.deviceUpdateOperationCompleted, userState);
    }
    
    private void OndeviceUpdateOperationCompleted(object arg) {
        if ((this.deviceUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceUpdateCompleted(this, new deviceUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceGlobalRename(string DeviceName, string NewDeviceName) {
        object[] results = this.Invoke("deviceGlobalRename", new object[] {
                    DeviceName,
                    NewDeviceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceGlobalRename(string DeviceName, string NewDeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceGlobalRename", new object[] {
                    DeviceName,
                    NewDeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceGlobalRename(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceGlobalRenameAsync(string DeviceName, string NewDeviceName) {
        this.deviceGlobalRenameAsync(DeviceName, NewDeviceName, null);
    }
    
    /// <remarks/>
    public void deviceGlobalRenameAsync(string DeviceName, string NewDeviceName, object userState) {
        if ((this.deviceGlobalRenameOperationCompleted == null)) {
            this.deviceGlobalRenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceGlobalRenameOperationCompleted);
        }
        this.InvokeAsync("deviceGlobalRename", new object[] {
                    DeviceName,
                    NewDeviceName}, this.deviceGlobalRenameOperationCompleted, userState);
    }
    
    private void OndeviceGlobalRenameOperationCompleted(object arg) {
        if ((this.deviceGlobalRenameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceGlobalRenameCompleted(this, new deviceGlobalRenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setHCPResponse(string[] DeviceList, bool HCPFlag) {
        object[] results = this.Invoke("setHCPResponse", new object[] {
                    DeviceList,
                    HCPFlag});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetHCPResponse(string[] DeviceList, bool HCPFlag, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setHCPResponse", new object[] {
                    DeviceList,
                    HCPFlag}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetHCPResponse(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setHCPResponseAsync(string[] DeviceList, bool HCPFlag) {
        this.setHCPResponseAsync(DeviceList, HCPFlag, null);
    }
    
    /// <remarks/>
    public void setHCPResponseAsync(string[] DeviceList, bool HCPFlag, object userState) {
        if ((this.setHCPResponseOperationCompleted == null)) {
            this.setHCPResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetHCPResponseOperationCompleted);
        }
        this.InvokeAsync("setHCPResponse", new object[] {
                    DeviceList,
                    HCPFlag}, this.setHCPResponseOperationCompleted, userState);
    }
    
    private void OnsetHCPResponseOperationCompleted(object arg) {
        if ((this.setHCPResponseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setHCPResponseCompleted(this, new setHCPResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceUpdateIPv6Ready(string DeviceName, bool IPv6Ready) {
        object[] results = this.Invoke("deviceUpdateIPv6Ready", new object[] {
                    DeviceName,
                    IPv6Ready});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceUpdateIPv6Ready(string DeviceName, bool IPv6Ready, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceUpdateIPv6Ready", new object[] {
                    DeviceName,
                    IPv6Ready}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceUpdateIPv6Ready(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceUpdateIPv6ReadyAsync(string DeviceName, bool IPv6Ready) {
        this.deviceUpdateIPv6ReadyAsync(DeviceName, IPv6Ready, null);
    }
    
    /// <remarks/>
    public void deviceUpdateIPv6ReadyAsync(string DeviceName, bool IPv6Ready, object userState) {
        if ((this.deviceUpdateIPv6ReadyOperationCompleted == null)) {
            this.deviceUpdateIPv6ReadyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceUpdateIPv6ReadyOperationCompleted);
        }
        this.InvokeAsync("deviceUpdateIPv6Ready", new object[] {
                    DeviceName,
                    IPv6Ready}, this.deviceUpdateIPv6ReadyOperationCompleted, userState);
    }
    
    private void OndeviceUpdateIPv6ReadyOperationCompleted(object arg) {
        if ((this.deviceUpdateIPv6ReadyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceUpdateIPv6ReadyCompleted(this, new deviceUpdateIPv6ReadyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceUpdateManagerLock(string DeviceName, bool ManagerLocked) {
        object[] results = this.Invoke("deviceUpdateManagerLock", new object[] {
                    DeviceName,
                    ManagerLocked});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceUpdateManagerLock(string DeviceName, bool ManagerLocked, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceUpdateManagerLock", new object[] {
                    DeviceName,
                    ManagerLocked}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceUpdateManagerLock(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceUpdateManagerLockAsync(string DeviceName, bool ManagerLocked) {
        this.deviceUpdateManagerLockAsync(DeviceName, ManagerLocked, null);
    }
    
    /// <remarks/>
    public void deviceUpdateManagerLockAsync(string DeviceName, bool ManagerLocked, object userState) {
        if ((this.deviceUpdateManagerLockOperationCompleted == null)) {
            this.deviceUpdateManagerLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceUpdateManagerLockOperationCompleted);
        }
        this.InvokeAsync("deviceUpdateManagerLock", new object[] {
                    DeviceName,
                    ManagerLocked}, this.deviceUpdateManagerLockOperationCompleted, userState);
    }
    
    private void OndeviceUpdateManagerLockOperationCompleted(object arg) {
        if ((this.deviceUpdateManagerLockCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceUpdateManagerLockCompleted(this, new deviceUpdateManagerLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceSetBOOTPInfo(string Device, string Server, string ImagePath) {
        object[] results = this.Invoke("deviceSetBOOTPInfo", new object[] {
                    Device,
                    Server,
                    ImagePath});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceSetBOOTPInfo(string Device, string Server, string ImagePath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceSetBOOTPInfo", new object[] {
                    Device,
                    Server,
                    ImagePath}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceSetBOOTPInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceSetBOOTPInfoAsync(string Device, string Server, string ImagePath) {
        this.deviceSetBOOTPInfoAsync(Device, Server, ImagePath, null);
    }
    
    /// <remarks/>
    public void deviceSetBOOTPInfoAsync(string Device, string Server, string ImagePath, object userState) {
        if ((this.deviceSetBOOTPInfoOperationCompleted == null)) {
            this.deviceSetBOOTPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceSetBOOTPInfoOperationCompleted);
        }
        this.InvokeAsync("deviceSetBOOTPInfo", new object[] {
                    Device,
                    Server,
                    ImagePath}, this.deviceSetBOOTPInfoOperationCompleted, userState);
    }
    
    private void OndeviceSetBOOTPInfoOperationCompleted(object arg) {
        if ((this.deviceSetBOOTPInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceSetBOOTPInfoCompleted(this, new deviceSetBOOTPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceRemoveBOOTPInfo(string Device) {
        object[] results = this.Invoke("deviceRemoveBOOTPInfo", new object[] {
                    Device});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceRemoveBOOTPInfo(string Device, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceRemoveBOOTPInfo", new object[] {
                    Device}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceRemoveBOOTPInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceRemoveBOOTPInfoAsync(string Device) {
        this.deviceRemoveBOOTPInfoAsync(Device, null);
    }
    
    /// <remarks/>
    public void deviceRemoveBOOTPInfoAsync(string Device, object userState) {
        if ((this.deviceRemoveBOOTPInfoOperationCompleted == null)) {
            this.deviceRemoveBOOTPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceRemoveBOOTPInfoOperationCompleted);
        }
        this.InvokeAsync("deviceRemoveBOOTPInfo", new object[] {
                    Device}, this.deviceRemoveBOOTPInfoOperationCompleted, userState);
    }
    
    private void OndeviceRemoveBOOTPInfoOperationCompleted(object arg) {
        if ((this.deviceRemoveBOOTPInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceRemoveBOOTPInfoCompleted(this, new deviceRemoveBOOTPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("BOOTPInfo")]
    public BOOTPInfo getBOOTPInfo(string Device) {
        object[] results = this.Invoke("getBOOTPInfo", new object[] {
                    Device});
        return ((BOOTPInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetBOOTPInfo(string Device, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getBOOTPInfo", new object[] {
                    Device}, callback, asyncState);
    }
    
    /// <remarks/>
    public BOOTPInfo EndgetBOOTPInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((BOOTPInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getBOOTPInfoAsync(string Device) {
        this.getBOOTPInfoAsync(Device, null);
    }
    
    /// <remarks/>
    public void getBOOTPInfoAsync(string Device, object userState) {
        if ((this.getBOOTPInfoOperationCompleted == null)) {
            this.getBOOTPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBOOTPInfoOperationCompleted);
        }
        this.InvokeAsync("getBOOTPInfo", new object[] {
                    Device}, this.getBOOTPInfoOperationCompleted, userState);
    }
    
    private void OngetBOOTPInfoOperationCompleted(object arg) {
        if ((this.getBOOTPInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getBOOTPInfoCompleted(this, new getBOOTPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("BulkInterface")]
    public BulkInterface getBulkInterfaceInfo(string InterfaceName) {
        object[] results = this.Invoke("getBulkInterfaceInfo", new object[] {
                    InterfaceName});
        return ((BulkInterface)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetBulkInterfaceInfo(string InterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getBulkInterfaceInfo", new object[] {
                    InterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public BulkInterface EndgetBulkInterfaceInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((BulkInterface)(results[0]));
    }
    
    /// <remarks/>
    public void getBulkInterfaceInfoAsync(string InterfaceName) {
        this.getBulkInterfaceInfoAsync(InterfaceName, null);
    }
    
    /// <remarks/>
    public void getBulkInterfaceInfoAsync(string InterfaceName, object userState) {
        if ((this.getBulkInterfaceInfoOperationCompleted == null)) {
            this.getBulkInterfaceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBulkInterfaceInfoOperationCompleted);
        }
        this.InvokeAsync("getBulkInterfaceInfo", new object[] {
                    InterfaceName}, this.getBulkInterfaceInfoOperationCompleted, userState);
    }
    
    private void OngetBulkInterfaceInfoOperationCompleted(object arg) {
        if ((this.getBulkInterfaceInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getBulkInterfaceInfoCompleted(this, new getBulkInterfaceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setInsertAddress(string Set, string Address) {
        object[] results = this.Invoke("setInsertAddress", new object[] {
                    Set,
                    Address});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetInsertAddress(string Set, string Address, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setInsertAddress", new object[] {
                    Set,
                    Address}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetInsertAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setInsertAddressAsync(string Set, string Address) {
        this.setInsertAddressAsync(Set, Address, null);
    }
    
    /// <remarks/>
    public void setInsertAddressAsync(string Set, string Address, object userState) {
        if ((this.setInsertAddressOperationCompleted == null)) {
            this.setInsertAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetInsertAddressOperationCompleted);
        }
        this.InvokeAsync("setInsertAddress", new object[] {
                    Set,
                    Address}, this.setInsertAddressOperationCompleted, userState);
    }
    
    private void OnsetInsertAddressOperationCompleted(object arg) {
        if ((this.setInsertAddressCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setInsertAddressCompleted(this, new setInsertAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setInsertService(string Set, string Service) {
        object[] results = this.Invoke("setInsertService", new object[] {
                    Set,
                    Service});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetInsertService(string Set, string Service, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setInsertService", new object[] {
                    Set,
                    Service}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetInsertService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setInsertServiceAsync(string Set, string Service) {
        this.setInsertServiceAsync(Set, Service, null);
    }
    
    /// <remarks/>
    public void setInsertServiceAsync(string Set, string Service, object userState) {
        if ((this.setInsertServiceOperationCompleted == null)) {
            this.setInsertServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetInsertServiceOperationCompleted);
        }
        this.InvokeAsync("setInsertService", new object[] {
                    Set,
                    Service}, this.setInsertServiceOperationCompleted, userState);
    }
    
    private void OnsetInsertServiceOperationCompleted(object arg) {
        if ((this.setInsertServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setInsertServiceCompleted(this, new setInsertServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setDeleteAddress(string Set, string Address) {
        object[] results = this.Invoke("setDeleteAddress", new object[] {
                    Set,
                    Address});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetDeleteAddress(string Set, string Address, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setDeleteAddress", new object[] {
                    Set,
                    Address}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetDeleteAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setDeleteAddressAsync(string Set, string Address) {
        this.setDeleteAddressAsync(Set, Address, null);
    }
    
    /// <remarks/>
    public void setDeleteAddressAsync(string Set, string Address, object userState) {
        if ((this.setDeleteAddressOperationCompleted == null)) {
            this.setDeleteAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDeleteAddressOperationCompleted);
        }
        this.InvokeAsync("setDeleteAddress", new object[] {
                    Set,
                    Address}, this.setDeleteAddressOperationCompleted, userState);
    }
    
    private void OnsetDeleteAddressOperationCompleted(object arg) {
        if ((this.setDeleteAddressCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setDeleteAddressCompleted(this, new setDeleteAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setDeleteService(string Set, string Service) {
        object[] results = this.Invoke("setDeleteService", new object[] {
                    Set,
                    Service});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetDeleteService(string Set, string Service, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setDeleteService", new object[] {
                    Set,
                    Service}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetDeleteService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setDeleteServiceAsync(string Set, string Service) {
        this.setDeleteServiceAsync(Set, Service, null);
    }
    
    /// <remarks/>
    public void setDeleteServiceAsync(string Set, string Service, object userState) {
        if ((this.setDeleteServiceOperationCompleted == null)) {
            this.setDeleteServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDeleteServiceOperationCompleted);
        }
        this.InvokeAsync("setDeleteService", new object[] {
                    Set,
                    Service}, this.setDeleteServiceOperationCompleted, userState);
    }
    
    private void OnsetDeleteServiceOperationCompleted(object arg) {
        if ((this.setDeleteServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setDeleteServiceCompleted(this, new setDeleteServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("SetInfo")]
    public SetInfo getSetInfo(string SetName) {
        object[] results = this.Invoke("getSetInfo", new object[] {
                    SetName});
        return ((SetInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSetInfo(string SetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSetInfo", new object[] {
                    SetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public SetInfo EndgetSetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SetInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getSetInfoAsync(string SetName) {
        this.getSetInfoAsync(SetName, null);
    }
    
    /// <remarks/>
    public void getSetInfoAsync(string SetName, object userState) {
        if ((this.getSetInfoOperationCompleted == null)) {
            this.getSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSetInfoOperationCompleted);
        }
        this.InvokeAsync("getSetInfo", new object[] {
                    SetName}, this.getSetInfoOperationCompleted, userState);
    }
    
    private void OngetSetInfoOperationCompleted(object arg) {
        if ((this.getSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSetInfoCompleted(this, new getSetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("SetName")]
    public string getSetNameFromID(long SetID) {
        object[] results = this.Invoke("getSetNameFromID", new object[] {
                    SetID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSetNameFromID(long SetID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSetNameFromID", new object[] {
                    SetID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndgetSetNameFromID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void getSetNameFromIDAsync(long SetID) {
        this.getSetNameFromIDAsync(SetID, null);
    }
    
    /// <remarks/>
    public void getSetNameFromIDAsync(long SetID, object userState) {
        if ((this.getSetNameFromIDOperationCompleted == null)) {
            this.getSetNameFromIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSetNameFromIDOperationCompleted);
        }
        this.InvokeAsync("getSetNameFromID", new object[] {
                    SetID}, this.getSetNameFromIDOperationCompleted, userState);
    }
    
    private void OngetSetNameFromIDOperationCompleted(object arg) {
        if ((this.getSetNameFromIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSetNameFromIDCompleted(this, new getSetNameFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Interfaces")]
    public string[] getSetAllInterfaces(string SetName) {
        object[] results = this.Invoke("getSetAllInterfaces", new object[] {
                    SetName});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSetAllInterfaces(string SetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSetAllInterfaces", new object[] {
                    SetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndgetSetAllInterfaces(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void getSetAllInterfacesAsync(string SetName) {
        this.getSetAllInterfacesAsync(SetName, null);
    }
    
    /// <remarks/>
    public void getSetAllInterfacesAsync(string SetName, object userState) {
        if ((this.getSetAllInterfacesOperationCompleted == null)) {
            this.getSetAllInterfacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSetAllInterfacesOperationCompleted);
        }
        this.InvokeAsync("getSetAllInterfaces", new object[] {
                    SetName}, this.getSetAllInterfacesOperationCompleted, userState);
    }
    
    private void OngetSetAllInterfacesOperationCompleted(object arg) {
        if ((this.getSetAllInterfacesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSetAllInterfacesCompleted(this, new getSetAllInterfacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Interfaces")]
    public string[] getSetInterfacesTrusting(string SetName) {
        object[] results = this.Invoke("getSetInterfacesTrusting", new object[] {
                    SetName});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSetInterfacesTrusting(string SetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSetInterfacesTrusting", new object[] {
                    SetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndgetSetInterfacesTrusting(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void getSetInterfacesTrustingAsync(string SetName) {
        this.getSetInterfacesTrustingAsync(SetName, null);
    }
    
    /// <remarks/>
    public void getSetInterfacesTrustingAsync(string SetName, object userState) {
        if ((this.getSetInterfacesTrustingOperationCompleted == null)) {
            this.getSetInterfacesTrustingOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSetInterfacesTrustingOperationCompleted);
        }
        this.InvokeAsync("getSetInterfacesTrusting", new object[] {
                    SetName}, this.getSetInterfacesTrustingOperationCompleted, userState);
    }
    
    private void OngetSetInterfacesTrustingOperationCompleted(object arg) {
        if ((this.getSetInterfacesTrustingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSetInterfacesTrustingCompleted(this, new getSetInterfacesTrustingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("HostsInfo")]
    public InetInfo[] getHCPInfoArray(string[] Hosts) {
        object[] results = this.Invoke("getHCPInfoArray", new object[] {
                    Hosts});
        return ((InetInfo[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetHCPInfoArray(string[] Hosts, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getHCPInfoArray", new object[] {
                    Hosts}, callback, asyncState);
    }
    
    /// <remarks/>
    public InetInfo[] EndgetHCPInfoArray(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((InetInfo[])(results[0]));
    }
    
    /// <remarks/>
    public void getHCPInfoArrayAsync(string[] Hosts) {
        this.getHCPInfoArrayAsync(Hosts, null);
    }
    
    /// <remarks/>
    public void getHCPInfoArrayAsync(string[] Hosts, object userState) {
        if ((this.getHCPInfoArrayOperationCompleted == null)) {
            this.getHCPInfoArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHCPInfoArrayOperationCompleted);
        }
        this.InvokeAsync("getHCPInfoArray", new object[] {
                    Hosts}, this.getHCPInfoArrayOperationCompleted, userState);
    }
    
    private void OngetHCPInfoArrayOperationCompleted(object arg) {
        if ((this.getHCPInfoArrayCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getHCPInfoArrayCompleted(this, new getHCPInfoArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Hosts")]
    public string[] getDevicesFromService(string Service) {
        object[] results = this.Invoke("getDevicesFromService", new object[] {
                    Service});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetDevicesFromService(string Service, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getDevicesFromService", new object[] {
                    Service}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndgetDevicesFromService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void getDevicesFromServiceAsync(string Service) {
        this.getDevicesFromServiceAsync(Service, null);
    }
    
    /// <remarks/>
    public void getDevicesFromServiceAsync(string Service, object userState) {
        if ((this.getDevicesFromServiceOperationCompleted == null)) {
            this.getDevicesFromServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevicesFromServiceOperationCompleted);
        }
        this.InvokeAsync("getDevicesFromService", new object[] {
                    Service}, this.getDevicesFromServiceOperationCompleted, userState);
    }
    
    private void OngetDevicesFromServiceOperationCompleted(object arg) {
        if ((this.getDevicesFromServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getDevicesFromServiceCompleted(this, new getDevicesFromServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Hosts")]
    public string[] getSwitchesFromService(string Service) {
        object[] results = this.Invoke("getSwitchesFromService", new object[] {
                    Service});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSwitchesFromService(string Service, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSwitchesFromService", new object[] {
                    Service}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndgetSwitchesFromService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void getSwitchesFromServiceAsync(string Service) {
        this.getSwitchesFromServiceAsync(Service, null);
    }
    
    /// <remarks/>
    public void getSwitchesFromServiceAsync(string Service, object userState) {
        if ((this.getSwitchesFromServiceOperationCompleted == null)) {
            this.getSwitchesFromServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSwitchesFromServiceOperationCompleted);
        }
        this.InvokeAsync("getSwitchesFromService", new object[] {
                    Service}, this.getSwitchesFromServiceOperationCompleted, userState);
    }
    
    private void OngetSwitchesFromServiceOperationCompleted(object arg) {
        if ((this.getSwitchesFromServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSwitchesFromServiceCompleted(this, new getSwitchesFromServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("SwitchInfo")]
    public SwitchPort[] getSwitchInfo(string SwitchName) {
        object[] results = this.Invoke("getSwitchInfo", new object[] {
                    SwitchName});
        return ((SwitchPort[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSwitchInfo(string SwitchName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSwitchInfo", new object[] {
                    SwitchName}, callback, asyncState);
    }
    
    /// <remarks/>
    public SwitchPort[] EndgetSwitchInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SwitchPort[])(results[0]));
    }
    
    /// <remarks/>
    public void getSwitchInfoAsync(string SwitchName) {
        this.getSwitchInfoAsync(SwitchName, null);
    }
    
    /// <remarks/>
    public void getSwitchInfoAsync(string SwitchName, object userState) {
        if ((this.getSwitchInfoOperationCompleted == null)) {
            this.getSwitchInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSwitchInfoOperationCompleted);
        }
        this.InvokeAsync("getSwitchInfo", new object[] {
                    SwitchName}, this.getSwitchInfoOperationCompleted, userState);
    }
    
    private void OngetSwitchInfoOperationCompleted(object arg) {
        if ((this.getSwitchInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSwitchInfoCompleted(this, new getSwitchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("ConnectionInfo")]
    public Connection[] getConnectionsFromDevice(string DeviceName) {
        object[] results = this.Invoke("getConnectionsFromDevice", new object[] {
                    DeviceName});
        return ((Connection[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetConnectionsFromDevice(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getConnectionsFromDevice", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public Connection[] EndgetConnectionsFromDevice(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Connection[])(results[0]));
    }
    
    /// <remarks/>
    public void getConnectionsFromDeviceAsync(string DeviceName) {
        this.getConnectionsFromDeviceAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void getConnectionsFromDeviceAsync(string DeviceName, object userState) {
        if ((this.getConnectionsFromDeviceOperationCompleted == null)) {
            this.getConnectionsFromDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConnectionsFromDeviceOperationCompleted);
        }
        this.InvokeAsync("getConnectionsFromDevice", new object[] {
                    DeviceName}, this.getConnectionsFromDeviceOperationCompleted, userState);
    }
    
    private void OngetConnectionsFromDeviceOperationCompleted(object arg) {
        if ((this.getConnectionsFromDeviceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getConnectionsFromDeviceCompleted(this, new getConnectionsFromDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("OutletLocation")]
    public OutletLocation getOutletLocationFromSwitchPort(string SwitchName, string PortName) {
        object[] results = this.Invoke("getOutletLocationFromSwitchPort", new object[] {
                    SwitchName,
                    PortName});
        return ((OutletLocation)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetOutletLocationFromSwitchPort(string SwitchName, string PortName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getOutletLocationFromSwitchPort", new object[] {
                    SwitchName,
                    PortName}, callback, asyncState);
    }
    
    /// <remarks/>
    public OutletLocation EndgetOutletLocationFromSwitchPort(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((OutletLocation)(results[0]));
    }
    
    /// <remarks/>
    public void getOutletLocationFromSwitchPortAsync(string SwitchName, string PortName) {
        this.getOutletLocationFromSwitchPortAsync(SwitchName, PortName, null);
    }
    
    /// <remarks/>
    public void getOutletLocationFromSwitchPortAsync(string SwitchName, string PortName, object userState) {
        if ((this.getOutletLocationFromSwitchPortOperationCompleted == null)) {
            this.getOutletLocationFromSwitchPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutletLocationFromSwitchPortOperationCompleted);
        }
        this.InvokeAsync("getOutletLocationFromSwitchPort", new object[] {
                    SwitchName,
                    PortName}, this.getOutletLocationFromSwitchPortOperationCompleted, userState);
    }
    
    private void OngetOutletLocationFromSwitchPortOperationCompleted(object arg) {
        if ((this.getOutletLocationFromSwitchPortCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getOutletLocationFromSwitchPortCompleted(this, new getOutletLocationFromSwitchPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("ObservedConnections")]
    public ObservedSwitchConnection[] getCurrentConnection(string ip, string[] HardwareAddressList) {
        object[] results = this.Invoke("getCurrentConnection", new object[] {
                    ip,
                    HardwareAddressList});
        return ((ObservedSwitchConnection[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetCurrentConnection(string ip, string[] HardwareAddressList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getCurrentConnection", new object[] {
                    ip,
                    HardwareAddressList}, callback, asyncState);
    }
    
    /// <remarks/>
    public ObservedSwitchConnection[] EndgetCurrentConnection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ObservedSwitchConnection[])(results[0]));
    }
    
    /// <remarks/>
    public void getCurrentConnectionAsync(string ip, string[] HardwareAddressList) {
        this.getCurrentConnectionAsync(ip, HardwareAddressList, null);
    }
    
    /// <remarks/>
    public void getCurrentConnectionAsync(string ip, string[] HardwareAddressList, object userState) {
        if ((this.getCurrentConnectionOperationCompleted == null)) {
            this.getCurrentConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrentConnectionOperationCompleted);
        }
        this.InvokeAsync("getCurrentConnection", new object[] {
                    ip,
                    HardwareAddressList}, this.getCurrentConnectionOperationCompleted, userState);
    }
    
    private void OngetCurrentConnectionOperationCompleted(object arg) {
        if ((this.getCurrentConnectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getCurrentConnectionCompleted(this, new getCurrentConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("ObservedConnections")]
    public ObservedSwitchConnection[] getMyCurrentConnection(string[] HardwareAddressList) {
        object[] results = this.Invoke("getMyCurrentConnection", new object[] {
                    HardwareAddressList});
        return ((ObservedSwitchConnection[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetMyCurrentConnection(string[] HardwareAddressList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getMyCurrentConnection", new object[] {
                    HardwareAddressList}, callback, asyncState);
    }
    
    /// <remarks/>
    public ObservedSwitchConnection[] EndgetMyCurrentConnection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ObservedSwitchConnection[])(results[0]));
    }
    
    /// <remarks/>
    public void getMyCurrentConnectionAsync(string[] HardwareAddressList) {
        this.getMyCurrentConnectionAsync(HardwareAddressList, null);
    }
    
    /// <remarks/>
    public void getMyCurrentConnectionAsync(string[] HardwareAddressList, object userState) {
        if ((this.getMyCurrentConnectionOperationCompleted == null)) {
            this.getMyCurrentConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyCurrentConnectionOperationCompleted);
        }
        this.InvokeAsync("getMyCurrentConnection", new object[] {
                    HardwareAddressList}, this.getMyCurrentConnectionOperationCompleted, userState);
    }
    
    private void OngetMyCurrentConnectionOperationCompleted(object arg) {
        if ((this.getMyCurrentConnectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getMyCurrentConnectionCompleted(this, new getMyCurrentConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool enableFanOutFromSwitchPort(string SwitchName, string PortName) {
        object[] results = this.Invoke("enableFanOutFromSwitchPort", new object[] {
                    SwitchName,
                    PortName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginenableFanOutFromSwitchPort(string SwitchName, string PortName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("enableFanOutFromSwitchPort", new object[] {
                    SwitchName,
                    PortName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndenableFanOutFromSwitchPort(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void enableFanOutFromSwitchPortAsync(string SwitchName, string PortName) {
        this.enableFanOutFromSwitchPortAsync(SwitchName, PortName, null);
    }
    
    /// <remarks/>
    public void enableFanOutFromSwitchPortAsync(string SwitchName, string PortName, object userState) {
        if ((this.enableFanOutFromSwitchPortOperationCompleted == null)) {
            this.enableFanOutFromSwitchPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenableFanOutFromSwitchPortOperationCompleted);
        }
        this.InvokeAsync("enableFanOutFromSwitchPort", new object[] {
                    SwitchName,
                    PortName}, this.enableFanOutFromSwitchPortOperationCompleted, userState);
    }
    
    private void OnenableFanOutFromSwitchPortOperationCompleted(object arg) {
        if ((this.enableFanOutFromSwitchPortCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.enableFanOutFromSwitchPortCompleted(this, new enableFanOutFromSwitchPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool bindUnbindInterface(string InterfaceName, string HardwareAddress) {
        object[] results = this.Invoke("bindUnbindInterface", new object[] {
                    InterfaceName,
                    HardwareAddress});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginbindUnbindInterface(string InterfaceName, string HardwareAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("bindUnbindInterface", new object[] {
                    InterfaceName,
                    HardwareAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndbindUnbindInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void bindUnbindInterfaceAsync(string InterfaceName, string HardwareAddress) {
        this.bindUnbindInterfaceAsync(InterfaceName, HardwareAddress, null);
    }
    
    /// <remarks/>
    public void bindUnbindInterfaceAsync(string InterfaceName, string HardwareAddress, object userState) {
        if ((this.bindUnbindInterfaceOperationCompleted == null)) {
            this.bindUnbindInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbindUnbindInterfaceOperationCompleted);
        }
        this.InvokeAsync("bindUnbindInterface", new object[] {
                    InterfaceName,
                    HardwareAddress}, this.bindUnbindInterfaceOperationCompleted, userState);
    }
    
    private void OnbindUnbindInterfaceOperationCompleted(object arg) {
        if ((this.bindUnbindInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.bindUnbindInterfaceCompleted(this, new bindUnbindInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceAddAlias(string InterfaceName, string Alias) {
        object[] results = this.Invoke("interfaceAddAlias", new object[] {
                    InterfaceName,
                    Alias});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceAddAlias(string InterfaceName, string Alias, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceAddAlias", new object[] {
                    InterfaceName,
                    Alias}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceAddAlias(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceAddAliasAsync(string InterfaceName, string Alias) {
        this.interfaceAddAliasAsync(InterfaceName, Alias, null);
    }
    
    /// <remarks/>
    public void interfaceAddAliasAsync(string InterfaceName, string Alias, object userState) {
        if ((this.interfaceAddAliasOperationCompleted == null)) {
            this.interfaceAddAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceAddAliasOperationCompleted);
        }
        this.InvokeAsync("interfaceAddAlias", new object[] {
                    InterfaceName,
                    Alias}, this.interfaceAddAliasOperationCompleted, userState);
    }
    
    private void OninterfaceAddAliasOperationCompleted(object arg) {
        if ((this.interfaceAddAliasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceAddAliasCompleted(this, new interfaceAddAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceRemoveAlias(string InterfaceName, string Alias) {
        object[] results = this.Invoke("interfaceRemoveAlias", new object[] {
                    InterfaceName,
                    Alias});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceRemoveAlias(string InterfaceName, string Alias, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceRemoveAlias", new object[] {
                    InterfaceName,
                    Alias}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceRemoveAlias(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceRemoveAliasAsync(string InterfaceName, string Alias) {
        this.interfaceRemoveAliasAsync(InterfaceName, Alias, null);
    }
    
    /// <remarks/>
    public void interfaceRemoveAliasAsync(string InterfaceName, string Alias, object userState) {
        if ((this.interfaceRemoveAliasOperationCompleted == null)) {
            this.interfaceRemoveAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceRemoveAliasOperationCompleted);
        }
        this.InvokeAsync("interfaceRemoveAlias", new object[] {
                    InterfaceName,
                    Alias}, this.interfaceRemoveAliasOperationCompleted, userState);
    }
    
    private void OninterfaceRemoveAliasOperationCompleted(object arg) {
        if ((this.interfaceRemoveAliasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceRemoveAliasCompleted(this, new interfaceRemoveAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceMoveAlias(string InterfaceName, string Alias, string NewInterfaceName) {
        object[] results = this.Invoke("interfaceMoveAlias", new object[] {
                    InterfaceName,
                    Alias,
                    NewInterfaceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceMoveAlias(string InterfaceName, string Alias, string NewInterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceMoveAlias", new object[] {
                    InterfaceName,
                    Alias,
                    NewInterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceMoveAlias(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceMoveAliasAsync(string InterfaceName, string Alias, string NewInterfaceName) {
        this.interfaceMoveAliasAsync(InterfaceName, Alias, NewInterfaceName, null);
    }
    
    /// <remarks/>
    public void interfaceMoveAliasAsync(string InterfaceName, string Alias, string NewInterfaceName, object userState) {
        if ((this.interfaceMoveAliasOperationCompleted == null)) {
            this.interfaceMoveAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceMoveAliasOperationCompleted);
        }
        this.InvokeAsync("interfaceMoveAlias", new object[] {
                    InterfaceName,
                    Alias,
                    NewInterfaceName}, this.interfaceMoveAliasOperationCompleted, userState);
    }
    
    private void OninterfaceMoveAliasOperationCompleted(object arg) {
        if ((this.interfaceMoveAliasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceMoveAliasCompleted(this, new interfaceMoveAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceRename(string InterfaceName, string NewInterfaceName) {
        object[] results = this.Invoke("interfaceRename", new object[] {
                    InterfaceName,
                    NewInterfaceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceRename(string InterfaceName, string NewInterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceRename", new object[] {
                    InterfaceName,
                    NewInterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceRename(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceRenameAsync(string InterfaceName, string NewInterfaceName) {
        this.interfaceRenameAsync(InterfaceName, NewInterfaceName, null);
    }
    
    /// <remarks/>
    public void interfaceRenameAsync(string InterfaceName, string NewInterfaceName, object userState) {
        if ((this.interfaceRenameOperationCompleted == null)) {
            this.interfaceRenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceRenameOperationCompleted);
        }
        this.InvokeAsync("interfaceRename", new object[] {
                    InterfaceName,
                    NewInterfaceName}, this.interfaceRenameOperationCompleted, userState);
    }
    
    private void OninterfaceRenameOperationCompleted(object arg) {
        if ((this.interfaceRenameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceRenameCompleted(this, new interfaceRenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceMove(string InterfaceName, string NewDeviceName) {
        object[] results = this.Invoke("interfaceMove", new object[] {
                    InterfaceName,
                    NewDeviceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceMove(string InterfaceName, string NewDeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceMove", new object[] {
                    InterfaceName,
                    NewDeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceMove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceMoveAsync(string InterfaceName, string NewDeviceName) {
        this.interfaceMoveAsync(InterfaceName, NewDeviceName, null);
    }
    
    /// <remarks/>
    public void interfaceMoveAsync(string InterfaceName, string NewDeviceName, object userState) {
        if ((this.interfaceMoveOperationCompleted == null)) {
            this.interfaceMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceMoveOperationCompleted);
        }
        this.InvokeAsync("interfaceMove", new object[] {
                    InterfaceName,
                    NewDeviceName}, this.interfaceMoveOperationCompleted, userState);
    }
    
    private void OninterfaceMoveOperationCompleted(object arg) {
        if ((this.interfaceMoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceMoveCompleted(this, new interfaceMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Sets")]
    public string[] searchSet(string SetPattern) {
        object[] results = this.Invoke("searchSet", new object[] {
                    SetPattern});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsearchSet(string SetPattern, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("searchSet", new object[] {
                    SetPattern}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndsearchSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void searchSetAsync(string SetPattern) {
        this.searchSetAsync(SetPattern, null);
    }
    
    /// <remarks/>
    public void searchSetAsync(string SetPattern, object userState) {
        if ((this.searchSetOperationCompleted == null)) {
            this.searchSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchSetOperationCompleted);
        }
        this.InvokeAsync("searchSet", new object[] {
                    SetPattern}, this.searchSetOperationCompleted, userState);
    }
    
    private void OnsearchSetOperationCompleted(object arg) {
        if ((this.searchSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.searchSetCompleted(this, new searchSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setInsert(SetInput Set) {
        object[] results = this.Invoke("setInsert", new object[] {
                    Set});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetInsert(SetInput Set, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setInsert", new object[] {
                    Set}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetInsert(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setInsertAsync(SetInput Set) {
        this.setInsertAsync(Set, null);
    }
    
    /// <remarks/>
    public void setInsertAsync(SetInput Set, object userState) {
        if ((this.setInsertOperationCompleted == null)) {
            this.setInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetInsertOperationCompleted);
        }
        this.InvokeAsync("setInsert", new object[] {
                    Set}, this.setInsertOperationCompleted, userState);
    }
    
    private void OnsetInsertOperationCompleted(object arg) {
        if ((this.setInsertCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setInsertCompleted(this, new setInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setRemove(string SetName) {
        object[] results = this.Invoke("setRemove", new object[] {
                    SetName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetRemove(string SetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setRemove", new object[] {
                    SetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetRemove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setRemoveAsync(string SetName) {
        this.setRemoveAsync(SetName, null);
    }
    
    /// <remarks/>
    public void setRemoveAsync(string SetName, object userState) {
        if ((this.setRemoveOperationCompleted == null)) {
            this.setRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetRemoveOperationCompleted);
        }
        this.InvokeAsync("setRemove", new object[] {
                    SetName}, this.setRemoveOperationCompleted, userState);
    }
    
    private void OnsetRemoveOperationCompleted(object arg) {
        if ((this.setRemoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setRemoveCompleted(this, new setRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setSwitchPortTypeStatus(string SwitchName, string PortName, SwitchPortTypeStatus SwitchPortTypeStatus) {
        object[] results = this.Invoke("setSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName,
                    SwitchPortTypeStatus});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetSwitchPortTypeStatus(string SwitchName, string PortName, SwitchPortTypeStatus SwitchPortTypeStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName,
                    SwitchPortTypeStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetSwitchPortTypeStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setSwitchPortTypeStatusAsync(string SwitchName, string PortName, SwitchPortTypeStatus SwitchPortTypeStatus) {
        this.setSwitchPortTypeStatusAsync(SwitchName, PortName, SwitchPortTypeStatus, null);
    }
    
    /// <remarks/>
    public void setSwitchPortTypeStatusAsync(string SwitchName, string PortName, SwitchPortTypeStatus SwitchPortTypeStatus, object userState) {
        if ((this.setSwitchPortTypeStatusOperationCompleted == null)) {
            this.setSwitchPortTypeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSwitchPortTypeStatusOperationCompleted);
        }
        this.InvokeAsync("setSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName,
                    SwitchPortTypeStatus}, this.setSwitchPortTypeStatusOperationCompleted, userState);
    }
    
    private void OnsetSwitchPortTypeStatusOperationCompleted(object arg) {
        if ((this.setSwitchPortTypeStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setSwitchPortTypeStatusCompleted(this, new setSwitchPortTypeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setSwitchPortMedium(string SwitchName, string PortName, string PortMedium) {
        object[] results = this.Invoke("setSwitchPortMedium", new object[] {
                    SwitchName,
                    PortName,
                    PortMedium});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetSwitchPortMedium(string SwitchName, string PortName, string PortMedium, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setSwitchPortMedium", new object[] {
                    SwitchName,
                    PortName,
                    PortMedium}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetSwitchPortMedium(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setSwitchPortMediumAsync(string SwitchName, string PortName, string PortMedium) {
        this.setSwitchPortMediumAsync(SwitchName, PortName, PortMedium, null);
    }
    
    /// <remarks/>
    public void setSwitchPortMediumAsync(string SwitchName, string PortName, string PortMedium, object userState) {
        if ((this.setSwitchPortMediumOperationCompleted == null)) {
            this.setSwitchPortMediumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSwitchPortMediumOperationCompleted);
        }
        this.InvokeAsync("setSwitchPortMedium", new object[] {
                    SwitchName,
                    PortName,
                    PortMedium}, this.setSwitchPortMediumOperationCompleted, userState);
    }
    
    private void OnsetSwitchPortMediumOperationCompleted(object arg) {
        if ((this.setSwitchPortMediumCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setSwitchPortMediumCompleted(this, new setSwitchPortMediumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool setSwitchPortService(string SwitchName, string PortName, string Service) {
        object[] results = this.Invoke("setSwitchPortService", new object[] {
                    SwitchName,
                    PortName,
                    Service});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsetSwitchPortService(string SwitchName, string PortName, string Service, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("setSwitchPortService", new object[] {
                    SwitchName,
                    PortName,
                    Service}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndsetSwitchPortService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void setSwitchPortServiceAsync(string SwitchName, string PortName, string Service) {
        this.setSwitchPortServiceAsync(SwitchName, PortName, Service, null);
    }
    
    /// <remarks/>
    public void setSwitchPortServiceAsync(string SwitchName, string PortName, string Service, object userState) {
        if ((this.setSwitchPortServiceOperationCompleted == null)) {
            this.setSwitchPortServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSwitchPortServiceOperationCompleted);
        }
        this.InvokeAsync("setSwitchPortService", new object[] {
                    SwitchName,
                    PortName,
                    Service}, this.setSwitchPortServiceOperationCompleted, userState);
    }
    
    private void OnsetSwitchPortServiceOperationCompleted(object arg) {
        if ((this.setSwitchPortServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.setSwitchPortServiceCompleted(this, new setSwitchPortServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("SwitchPortTypeStatus")]
    public SwitchPortTypeStatus getSwitchPortTypeStatus(string SwitchName, string PortName) {
        object[] results = this.Invoke("getSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName});
        return ((SwitchPortTypeStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetSwitchPortTypeStatus(string SwitchName, string PortName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName}, callback, asyncState);
    }
    
    /// <remarks/>
    public SwitchPortTypeStatus EndgetSwitchPortTypeStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SwitchPortTypeStatus)(results[0]));
    }
    
    /// <remarks/>
    public void getSwitchPortTypeStatusAsync(string SwitchName, string PortName) {
        this.getSwitchPortTypeStatusAsync(SwitchName, PortName, null);
    }
    
    /// <remarks/>
    public void getSwitchPortTypeStatusAsync(string SwitchName, string PortName, object userState) {
        if ((this.getSwitchPortTypeStatusOperationCompleted == null)) {
            this.getSwitchPortTypeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSwitchPortTypeStatusOperationCompleted);
        }
        this.InvokeAsync("getSwitchPortTypeStatus", new object[] {
                    SwitchName,
                    PortName}, this.getSwitchPortTypeStatusOperationCompleted, userState);
    }
    
    private void OngetSwitchPortTypeStatusOperationCompleted(object arg) {
        if ((this.getSwitchPortTypeStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSwitchPortTypeStatusCompleted(this, new getSwitchPortTypeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("NetNameTable")]
    public NetNameTuple[] searchNetNameTable(string NetName) {
        object[] results = this.Invoke("searchNetNameTable", new object[] {
                    NetName});
        return ((NetNameTuple[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginsearchNetNameTable(string NetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("searchNetNameTable", new object[] {
                    NetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public NetNameTuple[] EndsearchNetNameTable(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((NetNameTuple[])(results[0]));
    }
    
    /// <remarks/>
    public void searchNetNameTableAsync(string NetName) {
        this.searchNetNameTableAsync(NetName, null);
    }
    
    /// <remarks/>
    public void searchNetNameTableAsync(string NetName, object userState) {
        if ((this.searchNetNameTableOperationCompleted == null)) {
            this.searchNetNameTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchNetNameTableOperationCompleted);
        }
        this.InvokeAsync("searchNetNameTable", new object[] {
                    NetName}, this.searchNetNameTableOperationCompleted, userState);
    }
    
    private void OnsearchNetNameTableOperationCompleted(object arg) {
        if ((this.searchNetNameTableCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.searchNetNameTableCompleted(this, new searchNetNameTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceAddLogicalInterface(string DeviceName, LogicalInterfaceInput LogicalInterface) {
        object[] results = this.Invoke("deviceAddLogicalInterface", new object[] {
                    DeviceName,
                    LogicalInterface});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceAddLogicalInterface(string DeviceName, LogicalInterfaceInput LogicalInterface, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceAddLogicalInterface", new object[] {
                    DeviceName,
                    LogicalInterface}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceAddLogicalInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceAddLogicalInterfaceAsync(string DeviceName, LogicalInterfaceInput LogicalInterface) {
        this.deviceAddLogicalInterfaceAsync(DeviceName, LogicalInterface, null);
    }
    
    /// <remarks/>
    public void deviceAddLogicalInterfaceAsync(string DeviceName, LogicalInterfaceInput LogicalInterface, object userState) {
        if ((this.deviceAddLogicalInterfaceOperationCompleted == null)) {
            this.deviceAddLogicalInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceAddLogicalInterfaceOperationCompleted);
        }
        this.InvokeAsync("deviceAddLogicalInterface", new object[] {
                    DeviceName,
                    LogicalInterface}, this.deviceAddLogicalInterfaceOperationCompleted, userState);
    }
    
    private void OndeviceAddLogicalInterfaceOperationCompleted(object arg) {
        if ((this.deviceAddLogicalInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceAddLogicalInterfaceCompleted(this, new deviceAddLogicalInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool deviceRemoveLogicalInterface(string DeviceName, string InterfaceName) {
        object[] results = this.Invoke("deviceRemoveLogicalInterface", new object[] {
                    DeviceName,
                    InterfaceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindeviceRemoveLogicalInterface(string DeviceName, string InterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deviceRemoveLogicalInterface", new object[] {
                    DeviceName,
                    InterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddeviceRemoveLogicalInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void deviceRemoveLogicalInterfaceAsync(string DeviceName, string InterfaceName) {
        this.deviceRemoveLogicalInterfaceAsync(DeviceName, InterfaceName, null);
    }
    
    /// <remarks/>
    public void deviceRemoveLogicalInterfaceAsync(string DeviceName, string InterfaceName, object userState) {
        if ((this.deviceRemoveLogicalInterfaceOperationCompleted == null)) {
            this.deviceRemoveLogicalInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeviceRemoveLogicalInterfaceOperationCompleted);
        }
        this.InvokeAsync("deviceRemoveLogicalInterface", new object[] {
                    DeviceName,
                    InterfaceName}, this.deviceRemoveLogicalInterfaceOperationCompleted, userState);
    }
    
    private void OndeviceRemoveLogicalInterfaceOperationCompleted(object arg) {
        if ((this.deviceRemoveLogicalInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deviceRemoveLogicalInterfaceCompleted(this, new deviceRemoveLogicalInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool interfaceUpdateDescription(string InterfaceName, string Description) {
        object[] results = this.Invoke("interfaceUpdateDescription", new object[] {
                    InterfaceName,
                    Description});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegininterfaceUpdateDescription(string InterfaceName, string Description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("interfaceUpdateDescription", new object[] {
                    InterfaceName,
                    Description}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndinterfaceUpdateDescription(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void interfaceUpdateDescriptionAsync(string InterfaceName, string Description) {
        this.interfaceUpdateDescriptionAsync(InterfaceName, Description, null);
    }
    
    /// <remarks/>
    public void interfaceUpdateDescriptionAsync(string InterfaceName, string Description, object userState) {
        if ((this.interfaceUpdateDescriptionOperationCompleted == null)) {
            this.interfaceUpdateDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OninterfaceUpdateDescriptionOperationCompleted);
        }
        this.InvokeAsync("interfaceUpdateDescription", new object[] {
                    InterfaceName,
                    Description}, this.interfaceUpdateDescriptionOperationCompleted, userState);
    }
    
    private void OninterfaceUpdateDescriptionOperationCompleted(object arg) {
        if ((this.interfaceUpdateDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.interfaceUpdateDescriptionCompleted(this, new interfaceUpdateDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool serviceUpdateDescription(string ServiceName, string Description) {
        object[] results = this.Invoke("serviceUpdateDescription", new object[] {
                    ServiceName,
                    Description});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginserviceUpdateDescription(string ServiceName, string Description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("serviceUpdateDescription", new object[] {
                    ServiceName,
                    Description}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndserviceUpdateDescription(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void serviceUpdateDescriptionAsync(string ServiceName, string Description) {
        this.serviceUpdateDescriptionAsync(ServiceName, Description, null);
    }
    
    /// <remarks/>
    public void serviceUpdateDescriptionAsync(string ServiceName, string Description, object userState) {
        if ((this.serviceUpdateDescriptionOperationCompleted == null)) {
            this.serviceUpdateDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceUpdateDescriptionOperationCompleted);
        }
        this.InvokeAsync("serviceUpdateDescription", new object[] {
                    ServiceName,
                    Description}, this.serviceUpdateDescriptionOperationCompleted, userState);
    }
    
    private void OnserviceUpdateDescriptionOperationCompleted(object arg) {
        if ((this.serviceUpdateDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.serviceUpdateDescriptionCompleted(this, new serviceUpdateDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("ServiceInfo")]
    public ServiceInfo getServiceInfo(string ServiceName) {
        object[] results = this.Invoke("getServiceInfo", new object[] {
                    ServiceName});
        return ((ServiceInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetServiceInfo(string ServiceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getServiceInfo", new object[] {
                    ServiceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public ServiceInfo EndgetServiceInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ServiceInfo)(results[0]));
    }
    
    /// <remarks/>
    public void getServiceInfoAsync(string ServiceName) {
        this.getServiceInfoAsync(ServiceName, null);
    }
    
    /// <remarks/>
    public void getServiceInfoAsync(string ServiceName, object userState) {
        if ((this.getServiceInfoOperationCompleted == null)) {
            this.getServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceInfoOperationCompleted);
        }
        this.InvokeAsync("getServiceInfo", new object[] {
                    ServiceName}, this.getServiceInfoOperationCompleted, userState);
    }
    
    private void OngetServiceInfoOperationCompleted(object arg) {
        if ((this.getServiceInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getServiceInfoCompleted(this, new getServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmCreate(DeviceInput VMDevice, VMCreateOptions VMCreateOptions) {
        object[] results = this.Invoke("vmCreate", new object[] {
                    VMDevice,
                    VMCreateOptions});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmCreate(DeviceInput VMDevice, VMCreateOptions VMCreateOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmCreate", new object[] {
                    VMDevice,
                    VMCreateOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmCreateAsync(DeviceInput VMDevice, VMCreateOptions VMCreateOptions) {
        this.vmCreateAsync(VMDevice, VMCreateOptions, null);
    }
    
    /// <remarks/>
    public void vmCreateAsync(DeviceInput VMDevice, VMCreateOptions VMCreateOptions, object userState) {
        if ((this.vmCreateOperationCompleted == null)) {
            this.vmCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmCreateOperationCompleted);
        }
        this.InvokeAsync("vmCreate", new object[] {
                    VMDevice,
                    VMCreateOptions}, this.vmCreateOperationCompleted, userState);
    }
    
    private void OnvmCreateOperationCompleted(object arg) {
        if ((this.vmCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmCreateCompleted(this, new vmCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmMigrate(string VMName, string NewParent) {
        object[] results = this.Invoke("vmMigrate", new object[] {
                    VMName,
                    NewParent});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmMigrate(string VMName, string NewParent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmMigrate", new object[] {
                    VMName,
                    NewParent}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmMigrate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmMigrateAsync(string VMName, string NewParent) {
        this.vmMigrateAsync(VMName, NewParent, null);
    }
    
    /// <remarks/>
    public void vmMigrateAsync(string VMName, string NewParent, object userState) {
        if ((this.vmMigrateOperationCompleted == null)) {
            this.vmMigrateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmMigrateOperationCompleted);
        }
        this.InvokeAsync("vmMigrate", new object[] {
                    VMName,
                    NewParent}, this.vmMigrateOperationCompleted, userState);
    }
    
    private void OnvmMigrateOperationCompleted(object arg) {
        if ((this.vmMigrateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmMigrateCompleted(this, new vmMigrateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmUpdate(string DeviceName, DeviceInput DeviceInput) {
        object[] results = this.Invoke("vmUpdate", new object[] {
                    DeviceName,
                    DeviceInput});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmUpdate(string DeviceName, DeviceInput DeviceInput, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmUpdate", new object[] {
                    DeviceName,
                    DeviceInput}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmUpdate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmUpdateAsync(string DeviceName, DeviceInput DeviceInput) {
        this.vmUpdateAsync(DeviceName, DeviceInput, null);
    }
    
    /// <remarks/>
    public void vmUpdateAsync(string DeviceName, DeviceInput DeviceInput, object userState) {
        if ((this.vmUpdateOperationCompleted == null)) {
            this.vmUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmUpdateOperationCompleted);
        }
        this.InvokeAsync("vmUpdate", new object[] {
                    DeviceName,
                    DeviceInput}, this.vmUpdateOperationCompleted, userState);
    }
    
    private void OnvmUpdateOperationCompleted(object arg) {
        if ((this.vmUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmUpdateCompleted(this, new vmUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmDestroy(string VMName) {
        object[] results = this.Invoke("vmDestroy", new object[] {
                    VMName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmDestroy(string VMName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmDestroy", new object[] {
                    VMName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmDestroy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmDestroyAsync(string VMName) {
        this.vmDestroyAsync(VMName, null);
    }
    
    /// <remarks/>
    public void vmDestroyAsync(string VMName, object userState) {
        if ((this.vmDestroyOperationCompleted == null)) {
            this.vmDestroyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmDestroyOperationCompleted);
        }
        this.InvokeAsync("vmDestroy", new object[] {
                    VMName}, this.vmDestroyOperationCompleted, userState);
    }
    
    private void OnvmDestroyOperationCompleted(object arg) {
        if ((this.vmDestroyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmDestroyCompleted(this, new vmDestroyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("VMClusterInfo")]
    public VMClusterInfo vmClusterGetInfo(string VMClusterName) {
        object[] results = this.Invoke("vmClusterGetInfo", new object[] {
                    VMClusterName});
        return ((VMClusterInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmClusterGetInfo(string VMClusterName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmClusterGetInfo", new object[] {
                    VMClusterName}, callback, asyncState);
    }
    
    /// <remarks/>
    public VMClusterInfo EndvmClusterGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((VMClusterInfo)(results[0]));
    }
    
    /// <remarks/>
    public void vmClusterGetInfoAsync(string VMClusterName) {
        this.vmClusterGetInfoAsync(VMClusterName, null);
    }
    
    /// <remarks/>
    public void vmClusterGetInfoAsync(string VMClusterName, object userState) {
        if ((this.vmClusterGetInfoOperationCompleted == null)) {
            this.vmClusterGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmClusterGetInfoOperationCompleted);
        }
        this.InvokeAsync("vmClusterGetInfo", new object[] {
                    VMClusterName}, this.vmClusterGetInfoOperationCompleted, userState);
    }
    
    private void OnvmClusterGetInfoOperationCompleted(object arg) {
        if ((this.vmClusterGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmClusterGetInfoCompleted(this, new vmClusterGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Hosts")]
    public string[] vmClusterGetDevices(string VMClusterName) {
        object[] results = this.Invoke("vmClusterGetDevices", new object[] {
                    VMClusterName});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmClusterGetDevices(string VMClusterName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmClusterGetDevices", new object[] {
                    VMClusterName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndvmClusterGetDevices(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void vmClusterGetDevicesAsync(string VMClusterName) {
        this.vmClusterGetDevicesAsync(VMClusterName, null);
    }
    
    /// <remarks/>
    public void vmClusterGetDevicesAsync(string VMClusterName, object userState) {
        if ((this.vmClusterGetDevicesOperationCompleted == null)) {
            this.vmClusterGetDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmClusterGetDevicesOperationCompleted);
        }
        this.InvokeAsync("vmClusterGetDevices", new object[] {
                    VMClusterName}, this.vmClusterGetDevicesOperationCompleted, userState);
    }
    
    private void OnvmClusterGetDevicesOperationCompleted(object arg) {
        if ((this.vmClusterGetDevicesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmClusterGetDevicesCompleted(this, new vmClusterGetDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("VMInfo")]
    public VMInfo vmGetInfo(string VMName) {
        object[] results = this.Invoke("vmGetInfo", new object[] {
                    VMName});
        return ((VMInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmGetInfo(string VMName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmGetInfo", new object[] {
                    VMName}, callback, asyncState);
    }
    
    /// <remarks/>
    public VMInfo EndvmGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((VMInfo)(results[0]));
    }
    
    /// <remarks/>
    public void vmGetInfoAsync(string VMName) {
        this.vmGetInfoAsync(VMName, null);
    }
    
    /// <remarks/>
    public void vmGetInfoAsync(string VMName, object userState) {
        if ((this.vmGetInfoOperationCompleted == null)) {
            this.vmGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmGetInfoOperationCompleted);
        }
        this.InvokeAsync("vmGetInfo", new object[] {
                    VMName}, this.vmGetInfoOperationCompleted, userState);
    }
    
    private void OnvmGetInfoOperationCompleted(object arg) {
        if ((this.vmGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmGetInfoCompleted(this, new vmGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("VMClusterList")]
    public string[] vmGetClusterMembership(string DeviceName) {
        object[] results = this.Invoke("vmGetClusterMembership", new object[] {
                    DeviceName});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmGetClusterMembership(string DeviceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmGetClusterMembership", new object[] {
                    DeviceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndvmGetClusterMembership(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void vmGetClusterMembershipAsync(string DeviceName) {
        this.vmGetClusterMembershipAsync(DeviceName, null);
    }
    
    /// <remarks/>
    public void vmGetClusterMembershipAsync(string DeviceName, object userState) {
        if ((this.vmGetClusterMembershipOperationCompleted == null)) {
            this.vmGetClusterMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmGetClusterMembershipOperationCompleted);
        }
        this.InvokeAsync("vmGetClusterMembership", new object[] {
                    DeviceName}, this.vmGetClusterMembershipOperationCompleted, userState);
    }
    
    private void OnvmGetClusterMembershipOperationCompleted(object arg) {
        if ((this.vmGetClusterMembershipCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmGetClusterMembershipCompleted(this, new vmGetClusterMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("VMClusterList")]
    public string[] vmSearchCluster(VMClusterSearch VMClusterSearch) {
        object[] results = this.Invoke("vmSearchCluster", new object[] {
                    VMClusterSearch});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmSearchCluster(VMClusterSearch VMClusterSearch, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmSearchCluster", new object[] {
                    VMClusterSearch}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndvmSearchCluster(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void vmSearchClusterAsync(VMClusterSearch VMClusterSearch) {
        this.vmSearchClusterAsync(VMClusterSearch, null);
    }
    
    /// <remarks/>
    public void vmSearchClusterAsync(VMClusterSearch VMClusterSearch, object userState) {
        if ((this.vmSearchClusterOperationCompleted == null)) {
            this.vmSearchClusterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmSearchClusterOperationCompleted);
        }
        this.InvokeAsync("vmSearchCluster", new object[] {
                    VMClusterSearch}, this.vmSearchClusterOperationCompleted, userState);
    }
    
    private void OnvmSearchClusterOperationCompleted(object arg) {
        if ((this.vmSearchClusterCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmSearchClusterCompleted(this, new vmSearchClusterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmAddInterface(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions) {
        object[] results = this.Invoke("vmAddInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmAddInterface(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmAddInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmAddInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmAddInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions) {
        this.vmAddInterfaceAsync(VMName, InterfaceName, VMClusterName, VMInterfaceOptions, null);
    }
    
    /// <remarks/>
    public void vmAddInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions, object userState) {
        if ((this.vmAddInterfaceOperationCompleted == null)) {
            this.vmAddInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmAddInterfaceOperationCompleted);
        }
        this.InvokeAsync("vmAddInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions}, this.vmAddInterfaceOperationCompleted, userState);
    }
    
    private void OnvmAddInterfaceOperationCompleted(object arg) {
        if ((this.vmAddInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmAddInterfaceCompleted(this, new vmAddInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmRemoveInterface(string VMName, string InterfaceName) {
        object[] results = this.Invoke("vmRemoveInterface", new object[] {
                    VMName,
                    InterfaceName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmRemoveInterface(string VMName, string InterfaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmRemoveInterface", new object[] {
                    VMName,
                    InterfaceName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmRemoveInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmRemoveInterfaceAsync(string VMName, string InterfaceName) {
        this.vmRemoveInterfaceAsync(VMName, InterfaceName, null);
    }
    
    /// <remarks/>
    public void vmRemoveInterfaceAsync(string VMName, string InterfaceName, object userState) {
        if ((this.vmRemoveInterfaceOperationCompleted == null)) {
            this.vmRemoveInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmRemoveInterfaceOperationCompleted);
        }
        this.InvokeAsync("vmRemoveInterface", new object[] {
                    VMName,
                    InterfaceName}, this.vmRemoveInterfaceOperationCompleted, userState);
    }
    
    private void OnvmRemoveInterfaceOperationCompleted(object arg) {
        if ((this.vmRemoveInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmRemoveInterfaceCompleted(this, new vmRemoveInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmMoveInterface(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions) {
        object[] results = this.Invoke("vmMoveInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmMoveInterface(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmMoveInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmMoveInterface(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmMoveInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions) {
        this.vmMoveInterfaceAsync(VMName, InterfaceName, VMClusterName, VMInterfaceOptions, null);
    }
    
    /// <remarks/>
    public void vmMoveInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, VMInterfaceOptions VMInterfaceOptions, object userState) {
        if ((this.vmMoveInterfaceOperationCompleted == null)) {
            this.vmMoveInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmMoveInterfaceOperationCompleted);
        }
        this.InvokeAsync("vmMoveInterface", new object[] {
                    VMName,
                    InterfaceName,
                    VMClusterName,
                    VMInterfaceOptions}, this.vmMoveInterfaceOperationCompleted, userState);
    }
    
    private void OnvmMoveInterfaceOperationCompleted(object arg) {
        if ((this.vmMoveInterfaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmMoveInterfaceCompleted(this, new vmMoveInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("HardwareAddress")]
    public string vmAddCard(string VMName, InterfaceCard InterfaceCard) {
        object[] results = this.Invoke("vmAddCard", new object[] {
                    VMName,
                    InterfaceCard});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmAddCard(string VMName, InterfaceCard InterfaceCard, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmAddCard", new object[] {
                    VMName,
                    InterfaceCard}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndvmAddCard(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void vmAddCardAsync(string VMName, InterfaceCard InterfaceCard) {
        this.vmAddCardAsync(VMName, InterfaceCard, null);
    }
    
    /// <remarks/>
    public void vmAddCardAsync(string VMName, InterfaceCard InterfaceCard, object userState) {
        if ((this.vmAddCardOperationCompleted == null)) {
            this.vmAddCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmAddCardOperationCompleted);
        }
        this.InvokeAsync("vmAddCard", new object[] {
                    VMName,
                    InterfaceCard}, this.vmAddCardOperationCompleted, userState);
    }
    
    private void OnvmAddCardOperationCompleted(object arg) {
        if ((this.vmAddCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmAddCardCompleted(this, new vmAddCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool vmRemoveCard(string VMName, string HardwareAddress) {
        object[] results = this.Invoke("vmRemoveCard", new object[] {
                    VMName,
                    HardwareAddress});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginvmRemoveCard(string VMName, string HardwareAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("vmRemoveCard", new object[] {
                    VMName,
                    HardwareAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndvmRemoveCard(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void vmRemoveCardAsync(string VMName, string HardwareAddress) {
        this.vmRemoveCardAsync(VMName, HardwareAddress, null);
    }
    
    /// <remarks/>
    public void vmRemoveCardAsync(string VMName, string HardwareAddress, object userState) {
        if ((this.vmRemoveCardOperationCompleted == null)) {
            this.vmRemoveCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmRemoveCardOperationCompleted);
        }
        this.InvokeAsync("vmRemoveCard", new object[] {
                    VMName,
                    HardwareAddress}, this.vmRemoveCardOperationCompleted, userState);
    }
    
    private void OnvmRemoveCardOperationCompleted(object arg) {
        if ((this.vmRemoveCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.vmRemoveCardCompleted(this, new vmRemoveCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool dnsZoneUpdate(string Zone, DnsZoneOptions DnsZoneOptions) {
        object[] results = this.Invoke("dnsZoneUpdate", new object[] {
                    Zone,
                    DnsZoneOptions});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsZoneUpdate(string Zone, DnsZoneOptions DnsZoneOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsZoneUpdate", new object[] {
                    Zone,
                    DnsZoneOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddnsZoneUpdate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void dnsZoneUpdateAsync(string Zone, DnsZoneOptions DnsZoneOptions) {
        this.dnsZoneUpdateAsync(Zone, DnsZoneOptions, null);
    }
    
    /// <remarks/>
    public void dnsZoneUpdateAsync(string Zone, DnsZoneOptions DnsZoneOptions, object userState) {
        if ((this.dnsZoneUpdateOperationCompleted == null)) {
            this.dnsZoneUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsZoneUpdateOperationCompleted);
        }
        this.InvokeAsync("dnsZoneUpdate", new object[] {
                    Zone,
                    DnsZoneOptions}, this.dnsZoneUpdateOperationCompleted, userState);
    }
    
    private void OndnsZoneUpdateOperationCompleted(object arg) {
        if ((this.dnsZoneUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsZoneUpdateCompleted(this, new dnsZoneUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DNSDelegatedEntries")]
    public DNSDelegatedEntry[] dnsDelegatedSearch(string Search) {
        object[] results = this.Invoke("dnsDelegatedSearch", new object[] {
                    Search});
        return ((DNSDelegatedEntry[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedSearch(string Search, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedSearch", new object[] {
                    Search}, callback, asyncState);
    }
    
    /// <remarks/>
    public DNSDelegatedEntry[] EnddnsDelegatedSearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DNSDelegatedEntry[])(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedSearchAsync(string Search) {
        this.dnsDelegatedSearchAsync(Search, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedSearchAsync(string Search, object userState) {
        if ((this.dnsDelegatedSearchOperationCompleted == null)) {
            this.dnsDelegatedSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedSearchOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedSearch", new object[] {
                    Search}, this.dnsDelegatedSearchOperationCompleted, userState);
    }
    
    private void OndnsDelegatedSearchOperationCompleted(object arg) {
        if ((this.dnsDelegatedSearchCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedSearchCompleted(this, new dnsDelegatedSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DNSDelegatedEntry")]
    public DNSDelegatedEntry dnsDelegatedGetByNameView(string Domain, string View) {
        object[] results = this.Invoke("dnsDelegatedGetByNameView", new object[] {
                    Domain,
                    View});
        return ((DNSDelegatedEntry)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedGetByNameView(string Domain, string View, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedGetByNameView", new object[] {
                    Domain,
                    View}, callback, asyncState);
    }
    
    /// <remarks/>
    public DNSDelegatedEntry EnddnsDelegatedGetByNameView(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DNSDelegatedEntry)(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedGetByNameViewAsync(string Domain, string View) {
        this.dnsDelegatedGetByNameViewAsync(Domain, View, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedGetByNameViewAsync(string Domain, string View, object userState) {
        if ((this.dnsDelegatedGetByNameViewOperationCompleted == null)) {
            this.dnsDelegatedGetByNameViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedGetByNameViewOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedGetByNameView", new object[] {
                    Domain,
                    View}, this.dnsDelegatedGetByNameViewOperationCompleted, userState);
    }
    
    private void OndnsDelegatedGetByNameViewOperationCompleted(object arg) {
        if ((this.dnsDelegatedGetByNameViewCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedGetByNameViewCompleted(this, new dnsDelegatedGetByNameViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool dnsDelegatedAdd(DNSDelegatedInput DNSDelegatedInput) {
        object[] results = this.Invoke("dnsDelegatedAdd", new object[] {
                    DNSDelegatedInput});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedAdd(DNSDelegatedInput DNSDelegatedInput, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedAdd", new object[] {
                    DNSDelegatedInput}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddnsDelegatedAdd(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedAddAsync(DNSDelegatedInput DNSDelegatedInput) {
        this.dnsDelegatedAddAsync(DNSDelegatedInput, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedAddAsync(DNSDelegatedInput DNSDelegatedInput, object userState) {
        if ((this.dnsDelegatedAddOperationCompleted == null)) {
            this.dnsDelegatedAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedAddOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedAdd", new object[] {
                    DNSDelegatedInput}, this.dnsDelegatedAddOperationCompleted, userState);
    }
    
    private void OndnsDelegatedAddOperationCompleted(object arg) {
        if ((this.dnsDelegatedAddCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedAddCompleted(this, new dnsDelegatedAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("DNSDelegatedKeys")]
    public DNSDelegatedKey[] dnsDelegatedListKeys(Auth Auth) {
        object[] results = this.Invoke("dnsDelegatedListKeys", new object[] {
                    Auth});
        return ((DNSDelegatedKey[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedListKeys(Auth Auth, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedListKeys", new object[] {
                    Auth}, callback, asyncState);
    }
    
    /// <remarks/>
    public DNSDelegatedKey[] EnddnsDelegatedListKeys(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DNSDelegatedKey[])(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedListKeysAsync(Auth Auth) {
        this.dnsDelegatedListKeysAsync(Auth, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedListKeysAsync(Auth Auth, object userState) {
        if ((this.dnsDelegatedListKeysOperationCompleted == null)) {
            this.dnsDelegatedListKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedListKeysOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedListKeys", new object[] {
                    Auth}, this.dnsDelegatedListKeysOperationCompleted, userState);
    }
    
    private void OndnsDelegatedListKeysOperationCompleted(object arg) {
        if ((this.dnsDelegatedListKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedListKeysCompleted(this, new dnsDelegatedListKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool dnsDelegatedRemove(string Domain, string View) {
        object[] results = this.Invoke("dnsDelegatedRemove", new object[] {
                    Domain,
                    View});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedRemove(string Domain, string View, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedRemove", new object[] {
                    Domain,
                    View}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddnsDelegatedRemove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedRemoveAsync(string Domain, string View) {
        this.dnsDelegatedRemoveAsync(Domain, View, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedRemoveAsync(string Domain, string View, object userState) {
        if ((this.dnsDelegatedRemoveOperationCompleted == null)) {
            this.dnsDelegatedRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedRemoveOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedRemove", new object[] {
                    Domain,
                    View}, this.dnsDelegatedRemoveOperationCompleted, userState);
    }
    
    private void OndnsDelegatedRemoveOperationCompleted(object arg) {
        if ((this.dnsDelegatedRemoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedRemoveCompleted(this, new dnsDelegatedRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool dnsDelegatedAliasAdd(string Domain, string View, string Alias) {
        object[] results = this.Invoke("dnsDelegatedAliasAdd", new object[] {
                    Domain,
                    View,
                    Alias});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedAliasAdd(string Domain, string View, string Alias, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedAliasAdd", new object[] {
                    Domain,
                    View,
                    Alias}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddnsDelegatedAliasAdd(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedAliasAddAsync(string Domain, string View, string Alias) {
        this.dnsDelegatedAliasAddAsync(Domain, View, Alias, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedAliasAddAsync(string Domain, string View, string Alias, object userState) {
        if ((this.dnsDelegatedAliasAddOperationCompleted == null)) {
            this.dnsDelegatedAliasAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedAliasAddOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedAliasAdd", new object[] {
                    Domain,
                    View,
                    Alias}, this.dnsDelegatedAliasAddOperationCompleted, userState);
    }
    
    private void OndnsDelegatedAliasAddOperationCompleted(object arg) {
        if ((this.dnsDelegatedAliasAddCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedAliasAddCompleted(this, new dnsDelegatedAliasAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthValue")]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:NetworkService", ResponseNamespace="urn:NetworkService")]
    [return: System.Xml.Serialization.SoapElementAttribute("Result")]
    public bool dnsDelegatedAliasRemove(string Domain, string View, string Alias) {
        object[] results = this.Invoke("dnsDelegatedAliasRemove", new object[] {
                    Domain,
                    View,
                    Alias});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindnsDelegatedAliasRemove(string Domain, string View, string Alias, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dnsDelegatedAliasRemove", new object[] {
                    Domain,
                    View,
                    Alias}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EnddnsDelegatedAliasRemove(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void dnsDelegatedAliasRemoveAsync(string Domain, string View, string Alias) {
        this.dnsDelegatedAliasRemoveAsync(Domain, View, Alias, null);
    }
    
    /// <remarks/>
    public void dnsDelegatedAliasRemoveAsync(string Domain, string View, string Alias, object userState) {
        if ((this.dnsDelegatedAliasRemoveOperationCompleted == null)) {
            this.dnsDelegatedAliasRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OndnsDelegatedAliasRemoveOperationCompleted);
        }
        this.InvokeAsync("dnsDelegatedAliasRemove", new object[] {
                    Domain,
                    View,
                    Alias}, this.dnsDelegatedAliasRemoveOperationCompleted, userState);
    }
    
    private void OndnsDelegatedAliasRemoveOperationCompleted(object arg) {
        if ((this.dnsDelegatedAliasRemoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.dnsDelegatedAliasRemoveCompleted(this, new dnsDelegatedAliasRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Auth : SoapHeader {
    
    private string tokenField;
    
    /// <remarks/>
    public string token {
        get {
            return this.tokenField;
        }
        set {
            this.tokenField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DNSDelegatedKey {
    
    private System.Nullable<long> idField;
    
    private string keyNameField;
    
    private Person responsibleField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string KeyName {
        get {
            return this.keyNameField;
        }
        set {
            this.keyNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person Responsible {
        get {
            return this.responsibleField;
        }
        set {
            this.responsibleField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Person {
    
    private string nameField;
    
    private string firstNameField;
    
    private string departmentField;
    
    private string groupField;
    
    private string emailField;
    
    private string phoneField;
    
    private System.Nullable<long> cCIDField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Department {
        get {
            return this.departmentField;
        }
        set {
            this.departmentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Group {
        get {
            return this.groupField;
        }
        set {
            this.groupField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> CCID {
        get {
            return this.cCIDField;
        }
        set {
            this.cCIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DNSDelegatedInput {
    
    private string domainField;
    
    private string viewField;
    
    private string keyNameField;
    
    private string descriptionField;
    
    private string userDescriptionField;
    
    /// <remarks/>
    public string Domain {
        get {
            return this.domainField;
        }
        set {
            this.domainField = value;
        }
    }
    
    /// <remarks/>
    public string View {
        get {
            return this.viewField;
        }
        set {
            this.viewField = value;
        }
    }
    
    /// <remarks/>
    public string KeyName {
        get {
            return this.keyNameField;
        }
        set {
            this.keyNameField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public string UserDescription {
        get {
            return this.userDescriptionField;
        }
        set {
            this.userDescriptionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DNSDelegatedEntry {
    
    private System.Nullable<long> idField;
    
    private string domainField;
    
    private string viewField;
    
    private string keyNameField;
    
    private string descriptionField;
    
    private string userDescriptionField;
    
    private string[] aliasesField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Domain {
        get {
            return this.domainField;
        }
        set {
            this.domainField = value;
        }
    }
    
    /// <remarks/>
    public string View {
        get {
            return this.viewField;
        }
        set {
            this.viewField = value;
        }
    }
    
    /// <remarks/>
    public string KeyName {
        get {
            return this.keyNameField;
        }
        set {
            this.keyNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string UserDescription {
        get {
            return this.userDescriptionField;
        }
        set {
            this.userDescriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Aliases {
        get {
            return this.aliasesField;
        }
        set {
            this.aliasesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DnsZoneOptions {
    
    private System.Nullable<bool> internalField;
    
    private System.Nullable<bool> externalField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> Internal {
        get {
            return this.internalField;
        }
        set {
            this.internalField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> External {
        get {
            return this.externalField;
        }
        set {
            this.externalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class VMInterfaceOptions {
    
    private string ipField;
    
    private string iPv6Field;
    
    private string serviceNameField;
    
    private string internetConnectivityField;
    
    private string addressTypeField;
    
    private string bindHardwareAddressField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6 {
        get {
            return this.iPv6Field;
        }
        set {
            this.iPv6Field = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InternetConnectivity {
        get {
            return this.internetConnectivityField;
        }
        set {
            this.internetConnectivityField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string AddressType {
        get {
            return this.addressTypeField;
        }
        set {
            this.addressTypeField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string BindHardwareAddress {
        get {
            return this.bindHardwareAddressField;
        }
        set {
            this.bindHardwareAddressField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class VMClusterSearch {
    
    private string clusterNameField;
    
    private string surnameField;
    
    private string firstNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ClusterName {
        get {
            return this.clusterNameField;
        }
        set {
            this.clusterNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Surname {
        get {
            return this.surnameField;
        }
        set {
            this.surnameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class VMInfo {
    
    private string nameField;
    
    private bool isVMField;
    
    private string vMParentField;
    
    private string[] vMGuestListField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public bool IsVM {
        get {
            return this.isVMField;
        }
        set {
            this.isVMField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string VMParent {
        get {
            return this.vMParentField;
        }
        set {
            this.vMParentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] VMGuestList {
        get {
            return this.vMGuestListField;
        }
        set {
            this.vMGuestListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class VMClusterInfo {
    
    private long idField;
    
    private string nameField;
    
    private string descriptionField;
    
    private Person responsiblePersonField;
    
    private string[] servicesField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Services {
        get {
            return this.servicesField;
        }
        set {
            this.servicesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class VMCreateOptions {
    
    private string vMParentField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string VMParent {
        get {
            return this.vMParentField;
        }
        set {
            this.vMParentField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class ServiceInfo {
    
    private string nameField;
    
    private string primaryField;
    
    private string addressIniField;
    
    private string addressEndField;
    
    private int addressCountField;
    
    private string subnetMaskField;
    
    private string defaultGatewayField;
    
    private string[] nameServersField;
    
    private string[] timeServersField;
    
    private string[] mediumsField;
    
    private string networkDomainField;
    
    private string descriptionField;
    
    private int userIPTotalField;
    
    private int userIPFreeField;
    
    private string iPv6NetworkField;
    
    private int iPv6NetMaskField;
    
    private string iPv6DefaultGatewayField;
    
    private string[] iPv6NameServersField;
    
    private string[] iPv6TimeServersField;
    
    private string[] secondariesField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Primary {
        get {
            return this.primaryField;
        }
        set {
            this.primaryField = value;
        }
    }
    
    /// <remarks/>
    public string AddressIni {
        get {
            return this.addressIniField;
        }
        set {
            this.addressIniField = value;
        }
    }
    
    /// <remarks/>
    public string AddressEnd {
        get {
            return this.addressEndField;
        }
        set {
            this.addressEndField = value;
        }
    }
    
    /// <remarks/>
    public int AddressCount {
        get {
            return this.addressCountField;
        }
        set {
            this.addressCountField = value;
        }
    }
    
    /// <remarks/>
    public string SubnetMask {
        get {
            return this.subnetMaskField;
        }
        set {
            this.subnetMaskField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string DefaultGateway {
        get {
            return this.defaultGatewayField;
        }
        set {
            this.defaultGatewayField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] NameServers {
        get {
            return this.nameServersField;
        }
        set {
            this.nameServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] TimeServers {
        get {
            return this.timeServersField;
        }
        set {
            this.timeServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Mediums {
        get {
            return this.mediumsField;
        }
        set {
            this.mediumsField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string NetworkDomain {
        get {
            return this.networkDomainField;
        }
        set {
            this.networkDomainField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public int UserIPTotal {
        get {
            return this.userIPTotalField;
        }
        set {
            this.userIPTotalField = value;
        }
    }
    
    /// <remarks/>
    public int UserIPFree {
        get {
            return this.userIPFreeField;
        }
        set {
            this.userIPFreeField = value;
        }
    }
    
    /// <remarks/>
    public string IPv6Network {
        get {
            return this.iPv6NetworkField;
        }
        set {
            this.iPv6NetworkField = value;
        }
    }
    
    /// <remarks/>
    public int IPv6NetMask {
        get {
            return this.iPv6NetMaskField;
        }
        set {
            this.iPv6NetMaskField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6DefaultGateway {
        get {
            return this.iPv6DefaultGatewayField;
        }
        set {
            this.iPv6DefaultGatewayField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPv6NameServers {
        get {
            return this.iPv6NameServersField;
        }
        set {
            this.iPv6NameServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPv6TimeServers {
        get {
            return this.iPv6TimeServersField;
        }
        set {
            this.iPv6TimeServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Secondaries {
        get {
            return this.secondariesField;
        }
        set {
            this.secondariesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class LogicalInterfaceInput {
    
    private string interfaceNameField;
    
    private string serviceNameField;
    
    private string securityClassField;
    
    private string ipField;
    
    private string iPv6Field;
    
    private System.Nullable<bool> internetConnectivityField;
    
    /// <remarks/>
    public string InterfaceName {
        get {
            return this.interfaceNameField;
        }
        set {
            this.interfaceNameField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
    
    /// <remarks/>
    public string SecurityClass {
        get {
            return this.securityClassField;
        }
        set {
            this.securityClassField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6 {
        get {
            return this.iPv6Field;
        }
        set {
            this.iPv6Field = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> InternetConnectivity {
        get {
            return this.internetConnectivityField;
        }
        set {
            this.internetConnectivityField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class NetNameTuple {
    
    private string deviceNameField;
    
    private string interfaceNameField;
    
    private string ipField;
    
    private string iPv6Field;
    
    private string aliasField;
    
    /// <remarks/>
    public string DeviceName {
        get {
            return this.deviceNameField;
        }
        set {
            this.deviceNameField = value;
        }
    }
    
    /// <remarks/>
    public string InterfaceName {
        get {
            return this.interfaceNameField;
        }
        set {
            this.interfaceNameField = value;
        }
    }
    
    /// <remarks/>
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    public string IPv6 {
        get {
            return this.iPv6Field;
        }
        set {
            this.iPv6Field = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Alias {
        get {
            return this.aliasField;
        }
        set {
            this.aliasField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class SwitchPortTypeStatus {
    
    private string typeField;
    
    private string statusField;
    
    /// <remarks/>
    public string Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class SetInput {
    
    private string nameField;
    
    private string domainField;
    
    private PersonInput responsiblePersonField;
    
    private string descriptionField;
    
    private string projectUrlField;
    
    private string typeField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Domain {
        get {
            return this.domainField;
        }
        set {
            this.domainField = value;
        }
    }
    
    /// <remarks/>
    public PersonInput ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ProjectUrl {
        get {
            return this.projectUrlField;
        }
        set {
            this.projectUrlField = value;
        }
    }
    
    /// <remarks/>
    public string Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class PersonInput {
    
    private string nameField;
    
    private string firstNameField;
    
    private string departmentField;
    
    private string groupField;
    
    private System.Nullable<long> personIDField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Department {
        get {
            return this.departmentField;
        }
        set {
            this.departmentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Group {
        get {
            return this.groupField;
        }
        set {
            this.groupField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> PersonID {
        get {
            return this.personIDField;
        }
        set {
            this.personIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class ObservedSwitchConnection {
    
    private string switchNameField;
    
    private string switchPortField;
    
    private string hardwareAddressField;
    
    /// <remarks/>
    public string SwitchName {
        get {
            return this.switchNameField;
        }
        set {
            this.switchNameField = value;
        }
    }
    
    /// <remarks/>
    public string SwitchPort {
        get {
            return this.switchPortField;
        }
        set {
            this.switchPortField = value;
        }
    }
    
    /// <remarks/>
    public string HardwareAddress {
        get {
            return this.hardwareAddressField;
        }
        set {
            this.hardwareAddressField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class OutletLocation {
    
    private Location locationField;
    
    private Outlet outletField;
    
    /// <remarks/>
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    public Outlet Outlet {
        get {
            return this.outletField;
        }
        set {
            this.outletField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Location {
    
    private string buildingField;
    
    private string floorField;
    
    private string roomField;
    
    /// <remarks/>
    public string Building {
        get {
            return this.buildingField;
        }
        set {
            this.buildingField = value;
        }
    }
    
    /// <remarks/>
    public string Floor {
        get {
            return this.floorField;
        }
        set {
            this.floorField = value;
        }
    }
    
    /// <remarks/>
    public string Room {
        get {
            return this.roomField;
        }
        set {
            this.roomField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Outlet {
    
    private string idField;
    
    private bool fANOUTField;
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public bool FANOUT {
        get {
            return this.fANOUTField;
        }
        set {
            this.fANOUTField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Connection {
    
    private string interfaceNameField;
    
    private string switchNameField;
    
    private string switchPortField;
    
    /// <remarks/>
    public string InterfaceName {
        get {
            return this.interfaceNameField;
        }
        set {
            this.interfaceNameField = value;
        }
    }
    
    /// <remarks/>
    public string SwitchName {
        get {
            return this.switchNameField;
        }
        set {
            this.switchNameField = value;
        }
    }
    
    /// <remarks/>
    public string SwitchPort {
        get {
            return this.switchPortField;
        }
        set {
            this.switchPortField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class SwitchPort {
    
    private string nameField;
    
    private string serviceNameField;
    
    private string mediumField;
    
    private string typeField;
    
    private string statusField;
    
    private bool inUseField;
    
    private string[] devicesField;
    
    private string[] terminalsField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
    
    /// <remarks/>
    public string Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public string Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public bool InUse {
        get {
            return this.inUseField;
        }
        set {
            this.inUseField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Devices {
        get {
            return this.devicesField;
        }
        set {
            this.devicesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Terminals {
        get {
            return this.terminalsField;
        }
        set {
            this.terminalsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class InetInfo {
    
    private string hostNameField;
    
    private string hardwareAddressField;
    
    private string ipField;
    
    private string netAddressField;
    
    private string maskField;
    
    private string gatewayAddressField;
    
    /// <remarks/>
    public string HostName {
        get {
            return this.hostNameField;
        }
        set {
            this.hostNameField = value;
        }
    }
    
    /// <remarks/>
    public string HardwareAddress {
        get {
            return this.hardwareAddressField;
        }
        set {
            this.hardwareAddressField = value;
        }
    }
    
    /// <remarks/>
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    public string NetAddress {
        get {
            return this.netAddressField;
        }
        set {
            this.netAddressField = value;
        }
    }
    
    /// <remarks/>
    public string Mask {
        get {
            return this.maskField;
        }
        set {
            this.maskField = value;
        }
    }
    
    /// <remarks/>
    public string GatewayAddress {
        get {
            return this.gatewayAddressField;
        }
        set {
            this.gatewayAddressField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class SetInfo {
    
    private long idField;
    
    private string nameField;
    
    private string domainField;
    
    private Person responsiblePersonField;
    
    private string descriptionField;
    
    private string projectUrlField;
    
    private string typeField;
    
    private string[] addressesField;
    
    private string[] servicesField;
    
    private string[] setsField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Domain {
        get {
            return this.domainField;
        }
        set {
            this.domainField = value;
        }
    }
    
    /// <remarks/>
    public Person ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ProjectUrl {
        get {
            return this.projectUrlField;
        }
        set {
            this.projectUrlField = value;
        }
    }
    
    /// <remarks/>
    public string Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Addresses {
        get {
            return this.addressesField;
        }
        set {
            this.addressesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Services {
        get {
            return this.servicesField;
        }
        set {
            this.servicesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] Sets {
        get {
            return this.setsField;
        }
        set {
            this.setsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class BOOTPInfo {
    
    private string serverField;
    
    private string imagePathField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Server {
        get {
            return this.serverField;
        }
        set {
            this.serverField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ImagePath {
        get {
            return this.imagePathField;
        }
        set {
            this.imagePathField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class BulkMoveOptions {
    
    private bool preserveIPField;
    
    /// <remarks/>
    public bool PreserveIP {
        get {
            return this.preserveIPField;
        }
        set {
            this.preserveIPField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class BulkInterfaceAuto {
    
    private string interfaceNameField;
    
    private string[] iPAliasesField;
    
    private Location locationField;
    
    private string outletLabelField;
    
    private string securityClassField;
    
    private bool internetConnectivityField;
    
    private string mediumField;
    
    private string switchNameField;
    
    private string portNumberField;
    
    private string cableNumberField;
    
    private string ipField;
    
    private string iPv6Field;
    
    private string serviceNameField;
    
    private string bindHardwareAddressField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InterfaceName {
        get {
            return this.interfaceNameField;
        }
        set {
            this.interfaceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPAliases {
        get {
            return this.iPAliasesField;
        }
        set {
            this.iPAliasesField = value;
        }
    }
    
    /// <remarks/>
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    public string OutletLabel {
        get {
            return this.outletLabelField;
        }
        set {
            this.outletLabelField = value;
        }
    }
    
    /// <remarks/>
    public string SecurityClass {
        get {
            return this.securityClassField;
        }
        set {
            this.securityClassField = value;
        }
    }
    
    /// <remarks/>
    public bool InternetConnectivity {
        get {
            return this.internetConnectivityField;
        }
        set {
            this.internetConnectivityField = value;
        }
    }
    
    /// <remarks/>
    public string Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public string SwitchName {
        get {
            return this.switchNameField;
        }
        set {
            this.switchNameField = value;
        }
    }
    
    /// <remarks/>
    public string PortNumber {
        get {
            return this.portNumberField;
        }
        set {
            this.portNumberField = value;
        }
    }
    
    /// <remarks/>
    public string CableNumber {
        get {
            return this.cableNumberField;
        }
        set {
            this.cableNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6 {
        get {
            return this.iPv6Field;
        }
        set {
            this.iPv6Field = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string BindHardwareAddress {
        get {
            return this.bindHardwareAddressField;
        }
        set {
            this.bindHardwareAddressField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class BulkInterface {
    
    private string interfaceNameField;
    
    private string[] iPAliasesField;
    
    private Location locationField;
    
    private string outletLabelField;
    
    private string securityClassField;
    
    private bool internetConnectivityField;
    
    private string mediumField;
    
    private string switchNameField;
    
    private string portNumberField;
    
    private string cableNumberField;
    
    private string ipField;
    
    private string iPv6Field;
    
    private string serviceNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InterfaceName {
        get {
            return this.interfaceNameField;
        }
        set {
            this.interfaceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPAliases {
        get {
            return this.iPAliasesField;
        }
        set {
            this.iPAliasesField = value;
        }
    }
    
    /// <remarks/>
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    public string OutletLabel {
        get {
            return this.outletLabelField;
        }
        set {
            this.outletLabelField = value;
        }
    }
    
    /// <remarks/>
    public string SecurityClass {
        get {
            return this.securityClassField;
        }
        set {
            this.securityClassField = value;
        }
    }
    
    /// <remarks/>
    public bool InternetConnectivity {
        get {
            return this.internetConnectivityField;
        }
        set {
            this.internetConnectivityField = value;
        }
    }
    
    /// <remarks/>
    public string Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public string SwitchName {
        get {
            return this.switchNameField;
        }
        set {
            this.switchNameField = value;
        }
    }
    
    /// <remarks/>
    public string PortNumber {
        get {
            return this.portNumberField;
        }
        set {
            this.portNumberField = value;
        }
    }
    
    /// <remarks/>
    public string CableNumber {
        get {
            return this.cableNumberField;
        }
        set {
            this.cableNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IP {
        get {
            return this.ipField;
        }
        set {
            this.ipField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6 {
        get {
            return this.iPv6Field;
        }
        set {
            this.iPv6Field = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DeviceInput {
    
    private string deviceNameField;
    
    private Location locationField;
    
    private string zoneField;
    
    private string manufacturerField;
    
    private string modelField;
    
    private string descriptionField;
    
    private string tagField;
    
    private string serialNumberField;
    
    private OperatingSystem operatingSystemField;
    
    private string inventoryNumberField;
    
    private PersonInput landbManagerPersonField;
    
    private PersonInput responsiblePersonField;
    
    private PersonInput userPersonField;
    
    private System.Nullable<bool> hCPResponseField;
    
    private System.Nullable<bool> iPv6ReadyField;
    
    private System.Nullable<bool> managerLockedField;
    
    /// <remarks/>
    public string DeviceName {
        get {
            return this.deviceNameField;
        }
        set {
            this.deviceNameField = value;
        }
    }
    
    /// <remarks/>
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Zone {
        get {
            return this.zoneField;
        }
        set {
            this.zoneField = value;
        }
    }
    
    /// <remarks/>
    public string Manufacturer {
        get {
            return this.manufacturerField;
        }
        set {
            this.manufacturerField = value;
        }
    }
    
    /// <remarks/>
    public string Model {
        get {
            return this.modelField;
        }
        set {
            this.modelField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Tag {
        get {
            return this.tagField;
        }
        set {
            this.tagField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string SerialNumber {
        get {
            return this.serialNumberField;
        }
        set {
            this.serialNumberField = value;
        }
    }
    
    /// <remarks/>
    public OperatingSystem OperatingSystem {
        get {
            return this.operatingSystemField;
        }
        set {
            this.operatingSystemField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InventoryNumber {
        get {
            return this.inventoryNumberField;
        }
        set {
            this.inventoryNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public PersonInput LandbManagerPerson {
        get {
            return this.landbManagerPersonField;
        }
        set {
            this.landbManagerPersonField = value;
        }
    }
    
    /// <remarks/>
    public PersonInput ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public PersonInput UserPerson {
        get {
            return this.userPersonField;
        }
        set {
            this.userPersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> HCPResponse {
        get {
            return this.hCPResponseField;
        }
        set {
            this.hCPResponseField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> IPv6Ready {
        get {
            return this.iPv6ReadyField;
        }
        set {
            this.iPv6ReadyField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> ManagerLocked {
        get {
            return this.managerLockedField;
        }
        set {
            this.managerLockedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class OperatingSystem {
    
    private string nameField;
    
    private string versionField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Version {
        get {
            return this.versionField;
        }
        set {
            this.versionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Blocking {
    
    private Person byField;
    
    private Time dateField;
    
    private string reasonField;
    
    private string unblockRoleField;
    
    /// <remarks/>
    public Person By {
        get {
            return this.byField;
        }
        set {
            this.byField = value;
        }
    }
    
    /// <remarks/>
    public Time Date {
        get {
            return this.dateField;
        }
        set {
            this.dateField = value;
        }
    }
    
    /// <remarks/>
    public string Reason {
        get {
            return this.reasonField;
        }
        set {
            this.reasonField = value;
        }
    }
    
    /// <remarks/>
    public string UnblockRole {
        get {
            return this.unblockRoleField;
        }
        set {
            this.unblockRoleField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class Time {
    
    private System.Nullable<System.DateTime> timeUTCField;
    
    private System.Nullable<long> unixtimeField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> TimeUTC {
        get {
            return this.timeUTCField;
        }
        set {
            this.timeUTCField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> unixtime {
        get {
            return this.unixtimeField;
        }
        set {
            this.unixtimeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class ReverseTelnet {
    
    private string dataField;
    
    private string portField;
    
    private string serviceNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Data {
        get {
            return this.dataField;
        }
        set {
            this.dataField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Port {
        get {
            return this.portField;
        }
        set {
            this.portField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class InterfaceInformation {
    
    private System.Nullable<bool> connectedToSCField;
    
    private string nameField;
    
    private string iPAddressField;
    
    private string serviceNameField;
    
    private string securityClassField;
    
    private bool internetConnectivityField;
    
    private string subnetMaskField;
    
    private string defaultGatewayField;
    
    private string[] nameServersField;
    
    private string[] belongsToSetsField;
    
    private string[] timeServersField;
    
    private string iPv6AddressField;
    
    private int iPv6NetMaskField;
    
    private string[] iPv6NameServersField;
    
    private string[] iPv6TimeServersField;
    
    private string iPv6DefaultGatewayField;
    
    private string[] iPAliasesField;
    
    private InterfaceCard boundInterfaceCardField;
    
    private Outlet outletField;
    
    private string rackNameField;
    
    private string descriptionField;
    
    private string networkDomainNameField;
    
    private string mediumField;
    
    private ReverseTelnet reverseTelnetField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> ConnectedToSC {
        get {
            return this.connectedToSCField;
        }
        set {
            this.connectedToSCField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string IPAddress {
        get {
            return this.iPAddressField;
        }
        set {
            this.iPAddressField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceName {
        get {
            return this.serviceNameField;
        }
        set {
            this.serviceNameField = value;
        }
    }
    
    /// <remarks/>
    public string SecurityClass {
        get {
            return this.securityClassField;
        }
        set {
            this.securityClassField = value;
        }
    }
    
    /// <remarks/>
    public bool InternetConnectivity {
        get {
            return this.internetConnectivityField;
        }
        set {
            this.internetConnectivityField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string SubnetMask {
        get {
            return this.subnetMaskField;
        }
        set {
            this.subnetMaskField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string DefaultGateway {
        get {
            return this.defaultGatewayField;
        }
        set {
            this.defaultGatewayField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] NameServers {
        get {
            return this.nameServersField;
        }
        set {
            this.nameServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] BelongsToSets {
        get {
            return this.belongsToSetsField;
        }
        set {
            this.belongsToSetsField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] TimeServers {
        get {
            return this.timeServersField;
        }
        set {
            this.timeServersField = value;
        }
    }
    
    /// <remarks/>
    public string IPv6Address {
        get {
            return this.iPv6AddressField;
        }
        set {
            this.iPv6AddressField = value;
        }
    }
    
    /// <remarks/>
    public int IPv6NetMask {
        get {
            return this.iPv6NetMaskField;
        }
        set {
            this.iPv6NetMaskField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPv6NameServers {
        get {
            return this.iPv6NameServersField;
        }
        set {
            this.iPv6NameServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPv6TimeServers {
        get {
            return this.iPv6TimeServersField;
        }
        set {
            this.iPv6TimeServersField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPv6DefaultGateway {
        get {
            return this.iPv6DefaultGatewayField;
        }
        set {
            this.iPv6DefaultGatewayField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string[] IPAliases {
        get {
            return this.iPAliasesField;
        }
        set {
            this.iPAliasesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public InterfaceCard BoundInterfaceCard {
        get {
            return this.boundInterfaceCardField;
        }
        set {
            this.boundInterfaceCardField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Outlet Outlet {
        get {
            return this.outletField;
        }
        set {
            this.outletField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string RackName {
        get {
            return this.rackNameField;
        }
        set {
            this.rackNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public string NetworkDomainName {
        get {
            return this.networkDomainNameField;
        }
        set {
            this.networkDomainNameField = value;
        }
    }
    
    /// <remarks/>
    public string Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public ReverseTelnet ReverseTelnet {
        get {
            return this.reverseTelnetField;
        }
        set {
            this.reverseTelnetField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class InterfaceCard {
    
    private string hardwareAddressField;
    
    private string cardTypeField;
    
    /// <remarks/>
    public string HardwareAddress {
        get {
            return this.hardwareAddressField;
        }
        set {
            this.hardwareAddressField = value;
        }
    }
    
    /// <remarks/>
    public string CardType {
        get {
            return this.cardTypeField;
        }
        set {
            this.cardTypeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DeviceInfo {
    
    private string deviceNameField;
    
    private Location locationField;
    
    private string zoneField;
    
    private string statusField;
    
    private string manufacturerField;
    
    private string modelField;
    
    private string genericTypeField;
    
    private string descriptionField;
    
    private string tagField;
    
    private string serialNumberField;
    
    private OperatingSystem operatingSystemField;
    
    private string inventoryNumberField;
    
    private Time startDateField;
    
    private Time endDateField;
    
    private Person landbManagerPersonField;
    
    private Person responsiblePersonField;
    
    private Person userPersonField;
    
    private InterfaceCard[] networkInterfaceCardsField;
    
    private InterfaceInformation[] interfacesField;
    
    private bool hCPResponseField;
    
    private Blocking blockedField;
    
    private Time lastChangeDateField;
    
    private System.Nullable<bool> iPv6ReadyField;
    
    private System.Nullable<bool> managerLockedField;
    
    /// <remarks/>
    public string DeviceName {
        get {
            return this.deviceNameField;
        }
        set {
            this.deviceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Zone {
        get {
            return this.zoneField;
        }
        set {
            this.zoneField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public string Manufacturer {
        get {
            return this.manufacturerField;
        }
        set {
            this.manufacturerField = value;
        }
    }
    
    /// <remarks/>
    public string Model {
        get {
            return this.modelField;
        }
        set {
            this.modelField = value;
        }
    }
    
    /// <remarks/>
    public string GenericType {
        get {
            return this.genericTypeField;
        }
        set {
            this.genericTypeField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Tag {
        get {
            return this.tagField;
        }
        set {
            this.tagField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string SerialNumber {
        get {
            return this.serialNumberField;
        }
        set {
            this.serialNumberField = value;
        }
    }
    
    /// <remarks/>
    public OperatingSystem OperatingSystem {
        get {
            return this.operatingSystemField;
        }
        set {
            this.operatingSystemField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InventoryNumber {
        get {
            return this.inventoryNumberField;
        }
        set {
            this.inventoryNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time StartDate {
        get {
            return this.startDateField;
        }
        set {
            this.startDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time EndDate {
        get {
            return this.endDateField;
        }
        set {
            this.endDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person LandbManagerPerson {
        get {
            return this.landbManagerPersonField;
        }
        set {
            this.landbManagerPersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person UserPerson {
        get {
            return this.userPersonField;
        }
        set {
            this.userPersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public InterfaceCard[] NetworkInterfaceCards {
        get {
            return this.networkInterfaceCardsField;
        }
        set {
            this.networkInterfaceCardsField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public InterfaceInformation[] Interfaces {
        get {
            return this.interfacesField;
        }
        set {
            this.interfacesField = value;
        }
    }
    
    /// <remarks/>
    public bool HCPResponse {
        get {
            return this.hCPResponseField;
        }
        set {
            this.hCPResponseField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Blocking Blocked {
        get {
            return this.blockedField;
        }
        set {
            this.blockedField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time LastChangeDate {
        get {
            return this.lastChangeDateField;
        }
        set {
            this.lastChangeDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> IPv6Ready {
        get {
            return this.iPv6ReadyField;
        }
        set {
            this.iPv6ReadyField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> ManagerLocked {
        get {
            return this.managerLockedField;
        }
        set {
            this.managerLockedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DeviceBasicInfo {
    
    private string deviceNameField;
    
    private Location locationField;
    
    private string zoneField;
    
    private string statusField;
    
    private string manufacturerField;
    
    private string modelField;
    
    private string genericTypeField;
    
    private string descriptionField;
    
    private string tagField;
    
    private string serialNumberField;
    
    private OperatingSystem operatingSystemField;
    
    private string inventoryNumberField;
    
    private Time startDateField;
    
    private Time endDateField;
    
    private Person landbManagerPersonField;
    
    private Person responsiblePersonField;
    
    private Person userPersonField;
    
    private bool hCPResponseField;
    
    private Time lastChangeDateField;
    
    private System.Nullable<bool> iPv6ReadyField;
    
    private System.Nullable<bool> managerLockedField;
    
    /// <remarks/>
    public string DeviceName {
        get {
            return this.deviceNameField;
        }
        set {
            this.deviceNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Zone {
        get {
            return this.zoneField;
        }
        set {
            this.zoneField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public string Manufacturer {
        get {
            return this.manufacturerField;
        }
        set {
            this.manufacturerField = value;
        }
    }
    
    /// <remarks/>
    public string Model {
        get {
            return this.modelField;
        }
        set {
            this.modelField = value;
        }
    }
    
    /// <remarks/>
    public string GenericType {
        get {
            return this.genericTypeField;
        }
        set {
            this.genericTypeField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Tag {
        get {
            return this.tagField;
        }
        set {
            this.tagField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string SerialNumber {
        get {
            return this.serialNumberField;
        }
        set {
            this.serialNumberField = value;
        }
    }
    
    /// <remarks/>
    public OperatingSystem OperatingSystem {
        get {
            return this.operatingSystemField;
        }
        set {
            this.operatingSystemField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InventoryNumber {
        get {
            return this.inventoryNumberField;
        }
        set {
            this.inventoryNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time StartDate {
        get {
            return this.startDateField;
        }
        set {
            this.startDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time EndDate {
        get {
            return this.endDateField;
        }
        set {
            this.endDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person LandbManagerPerson {
        get {
            return this.landbManagerPersonField;
        }
        set {
            this.landbManagerPersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person ResponsiblePerson {
        get {
            return this.responsiblePersonField;
        }
        set {
            this.responsiblePersonField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Person UserPerson {
        get {
            return this.userPersonField;
        }
        set {
            this.userPersonField = value;
        }
    }
    
    /// <remarks/>
    public bool HCPResponse {
        get {
            return this.hCPResponseField;
        }
        set {
            this.hCPResponseField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Time LastChangeDate {
        get {
            return this.lastChangeDateField;
        }
        set {
            this.lastChangeDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> IPv6Ready {
        get {
            return this.iPv6ReadyField;
        }
        set {
            this.iPv6ReadyField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<bool> ManagerLocked {
        get {
            return this.managerLockedField;
        }
        set {
            this.managerLockedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
public partial class DeviceSearch {
    
    private string nameField;
    
    private string surnameField;
    
    private string firstNameField;
    
    private Location locationField;
    
    private string outletIDField;
    
    private string tagField;
    
    private string serialNumberField;
    
    private string inventoryNumberField;
    
    private string hardwareAddressField;
    
    private string iPAddressField;
    
    private string rackNameField;
    
    private System.Nullable<long> personIDField;
    
    private string domainField;
    
    private string responsibleDepGroupField;
    
    private string userResponsibleDepGroupField;
    
    private string operatingSystemField;
    
    private System.Nullable<System.DateTime> lastChangeDateField;
    
    private System.Nullable<System.DateTime> lastActiveDateField;
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Surname {
        get {
            return this.surnameField;
        }
        set {
            this.surnameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public Location Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string OutletID {
        get {
            return this.outletIDField;
        }
        set {
            this.outletIDField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Tag {
        get {
            return this.tagField;
        }
        set {
            this.tagField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string SerialNumber {
        get {
            return this.serialNumberField;
        }
        set {
            this.serialNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string InventoryNumber {
        get {
            return this.inventoryNumberField;
        }
        set {
            this.inventoryNumberField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string HardwareAddress {
        get {
            return this.hardwareAddressField;
        }
        set {
            this.hardwareAddressField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string IPAddress {
        get {
            return this.iPAddressField;
        }
        set {
            this.iPAddressField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string RackName {
        get {
            return this.rackNameField;
        }
        set {
            this.rackNameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<long> PersonID {
        get {
            return this.personIDField;
        }
        set {
            this.personIDField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string Domain {
        get {
            return this.domainField;
        }
        set {
            this.domainField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string ResponsibleDepGroup {
        get {
            return this.responsibleDepGroupField;
        }
        set {
            this.responsibleDepGroupField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string UserResponsibleDepGroup {
        get {
            return this.userResponsibleDepGroupField;
        }
        set {
            this.userResponsibleDepGroupField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public string OperatingSystem {
        get {
            return this.operatingSystemField;
        }
        set {
            this.operatingSystemField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> LastChangeDate {
        get {
            return this.lastChangeDateField;
        }
        set {
            this.lastChangeDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> LastActiveDate {
        get {
            return this.lastActiveDateField;
        }
        set {
            this.lastActiveDateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getAuthTokenCompletedEventHandler(object sender, getAuthTokenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getAuthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getAuthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void searchDeviceCompletedEventHandler(object sender, searchDeviceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class searchDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal searchDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getDeviceBasicInfoCompletedEventHandler(object sender, getDeviceBasicInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getDeviceBasicInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getDeviceBasicInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DeviceBasicInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DeviceBasicInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getDeviceInfoCompletedEventHandler(object sender, getDeviceInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DeviceInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DeviceInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getDeviceInfoArrayCompletedEventHandler(object sender, getDeviceInfoArrayCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getDeviceInfoArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getDeviceInfoArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DeviceInfo[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DeviceInfo[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getDeviceInfoFromNameMACCompletedEventHandler(object sender, getDeviceInfoFromNameMACCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getDeviceInfoFromNameMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getDeviceInfoFromNameMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DeviceInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DeviceInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getMyDeviceInfoCompletedEventHandler(object sender, getMyDeviceInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getMyDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getMyDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DeviceInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DeviceInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getLastChangedDevicesCompletedEventHandler(object sender, getLastChangedDevicesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getLastChangedDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getLastChangedDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void bulkInsertCompletedEventHandler(object sender, bulkInsertCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class bulkInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal bulkInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void bulkInsertAutoCompletedEventHandler(object sender, bulkInsertAutoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class bulkInsertAutoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal bulkInsertAutoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void bulkRemoveCompletedEventHandler(object sender, bulkRemoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class bulkRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal bulkRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceInsertCompletedEventHandler(object sender, deviceInsertCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceAddCardCompletedEventHandler(object sender, deviceAddCardCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceAddCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceAddCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceAddBulkInterfaceCompletedEventHandler(object sender, deviceAddBulkInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceAddBulkInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceAddBulkInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceRemoveCompletedEventHandler(object sender, deviceRemoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceRemoveCardCompletedEventHandler(object sender, deviceRemoveCardCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceRemoveCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceRemoveCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceRemoveBulkInterfaceCompletedEventHandler(object sender, deviceRemoveBulkInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceRemoveBulkInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceRemoveBulkInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceMoveBulkInterfaceCompletedEventHandler(object sender, deviceMoveBulkInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceMoveBulkInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceMoveBulkInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceUpdateCompletedEventHandler(object sender, deviceUpdateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceGlobalRenameCompletedEventHandler(object sender, deviceGlobalRenameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceGlobalRenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceGlobalRenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setHCPResponseCompletedEventHandler(object sender, setHCPResponseCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setHCPResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setHCPResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceUpdateIPv6ReadyCompletedEventHandler(object sender, deviceUpdateIPv6ReadyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceUpdateIPv6ReadyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceUpdateIPv6ReadyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceUpdateManagerLockCompletedEventHandler(object sender, deviceUpdateManagerLockCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceUpdateManagerLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceUpdateManagerLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceSetBOOTPInfoCompletedEventHandler(object sender, deviceSetBOOTPInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceSetBOOTPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceSetBOOTPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceRemoveBOOTPInfoCompletedEventHandler(object sender, deviceRemoveBOOTPInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceRemoveBOOTPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceRemoveBOOTPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getBOOTPInfoCompletedEventHandler(object sender, getBOOTPInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getBOOTPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getBOOTPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public BOOTPInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((BOOTPInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getBulkInterfaceInfoCompletedEventHandler(object sender, getBulkInterfaceInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getBulkInterfaceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getBulkInterfaceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public BulkInterface Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((BulkInterface)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setInsertAddressCompletedEventHandler(object sender, setInsertAddressCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setInsertAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setInsertAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setInsertServiceCompletedEventHandler(object sender, setInsertServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setInsertServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setInsertServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setDeleteAddressCompletedEventHandler(object sender, setDeleteAddressCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setDeleteAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setDeleteAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setDeleteServiceCompletedEventHandler(object sender, setDeleteServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setDeleteServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setDeleteServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSetInfoCompletedEventHandler(object sender, getSetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public SetInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((SetInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSetNameFromIDCompletedEventHandler(object sender, getSetNameFromIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSetNameFromIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSetNameFromIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSetAllInterfacesCompletedEventHandler(object sender, getSetAllInterfacesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSetAllInterfacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSetAllInterfacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSetInterfacesTrustingCompletedEventHandler(object sender, getSetInterfacesTrustingCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSetInterfacesTrustingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSetInterfacesTrustingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getHCPInfoArrayCompletedEventHandler(object sender, getHCPInfoArrayCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getHCPInfoArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getHCPInfoArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public InetInfo[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((InetInfo[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getDevicesFromServiceCompletedEventHandler(object sender, getDevicesFromServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getDevicesFromServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getDevicesFromServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSwitchesFromServiceCompletedEventHandler(object sender, getSwitchesFromServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSwitchesFromServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSwitchesFromServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSwitchInfoCompletedEventHandler(object sender, getSwitchInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSwitchInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSwitchInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public SwitchPort[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((SwitchPort[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getConnectionsFromDeviceCompletedEventHandler(object sender, getConnectionsFromDeviceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getConnectionsFromDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getConnectionsFromDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Connection[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Connection[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getOutletLocationFromSwitchPortCompletedEventHandler(object sender, getOutletLocationFromSwitchPortCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getOutletLocationFromSwitchPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getOutletLocationFromSwitchPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public OutletLocation Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((OutletLocation)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getCurrentConnectionCompletedEventHandler(object sender, getCurrentConnectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getCurrentConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getCurrentConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ObservedSwitchConnection[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ObservedSwitchConnection[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getMyCurrentConnectionCompletedEventHandler(object sender, getMyCurrentConnectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getMyCurrentConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getMyCurrentConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ObservedSwitchConnection[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ObservedSwitchConnection[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void enableFanOutFromSwitchPortCompletedEventHandler(object sender, enableFanOutFromSwitchPortCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class enableFanOutFromSwitchPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal enableFanOutFromSwitchPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void bindUnbindInterfaceCompletedEventHandler(object sender, bindUnbindInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class bindUnbindInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal bindUnbindInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceAddAliasCompletedEventHandler(object sender, interfaceAddAliasCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceAddAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceAddAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceRemoveAliasCompletedEventHandler(object sender, interfaceRemoveAliasCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceRemoveAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceRemoveAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceMoveAliasCompletedEventHandler(object sender, interfaceMoveAliasCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceMoveAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceMoveAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceRenameCompletedEventHandler(object sender, interfaceRenameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceRenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceRenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceMoveCompletedEventHandler(object sender, interfaceMoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void searchSetCompletedEventHandler(object sender, searchSetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class searchSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal searchSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setInsertCompletedEventHandler(object sender, setInsertCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setRemoveCompletedEventHandler(object sender, setRemoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setSwitchPortTypeStatusCompletedEventHandler(object sender, setSwitchPortTypeStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setSwitchPortTypeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setSwitchPortTypeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setSwitchPortMediumCompletedEventHandler(object sender, setSwitchPortMediumCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setSwitchPortMediumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setSwitchPortMediumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void setSwitchPortServiceCompletedEventHandler(object sender, setSwitchPortServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class setSwitchPortServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal setSwitchPortServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getSwitchPortTypeStatusCompletedEventHandler(object sender, getSwitchPortTypeStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getSwitchPortTypeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSwitchPortTypeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public SwitchPortTypeStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((SwitchPortTypeStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void searchNetNameTableCompletedEventHandler(object sender, searchNetNameTableCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class searchNetNameTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal searchNetNameTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public NetNameTuple[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((NetNameTuple[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceAddLogicalInterfaceCompletedEventHandler(object sender, deviceAddLogicalInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceAddLogicalInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceAddLogicalInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void deviceRemoveLogicalInterfaceCompletedEventHandler(object sender, deviceRemoveLogicalInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class deviceRemoveLogicalInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deviceRemoveLogicalInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void interfaceUpdateDescriptionCompletedEventHandler(object sender, interfaceUpdateDescriptionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class interfaceUpdateDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal interfaceUpdateDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void serviceUpdateDescriptionCompletedEventHandler(object sender, serviceUpdateDescriptionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class serviceUpdateDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal serviceUpdateDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getServiceInfoCompletedEventHandler(object sender, getServiceInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ServiceInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ServiceInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmCreateCompletedEventHandler(object sender, vmCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmMigrateCompletedEventHandler(object sender, vmMigrateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmMigrateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmMigrateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmUpdateCompletedEventHandler(object sender, vmUpdateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmDestroyCompletedEventHandler(object sender, vmDestroyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmDestroyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmDestroyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmClusterGetInfoCompletedEventHandler(object sender, vmClusterGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmClusterGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmClusterGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public VMClusterInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((VMClusterInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmClusterGetDevicesCompletedEventHandler(object sender, vmClusterGetDevicesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmClusterGetDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmClusterGetDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmGetInfoCompletedEventHandler(object sender, vmGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public VMInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((VMInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmGetClusterMembershipCompletedEventHandler(object sender, vmGetClusterMembershipCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmGetClusterMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmGetClusterMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmSearchClusterCompletedEventHandler(object sender, vmSearchClusterCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmSearchClusterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmSearchClusterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmAddInterfaceCompletedEventHandler(object sender, vmAddInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmAddInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmAddInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmRemoveInterfaceCompletedEventHandler(object sender, vmRemoveInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmRemoveInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmRemoveInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmMoveInterfaceCompletedEventHandler(object sender, vmMoveInterfaceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmMoveInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmMoveInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmAddCardCompletedEventHandler(object sender, vmAddCardCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmAddCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmAddCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void vmRemoveCardCompletedEventHandler(object sender, vmRemoveCardCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class vmRemoveCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal vmRemoveCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsZoneUpdateCompletedEventHandler(object sender, dnsZoneUpdateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsZoneUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsZoneUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedSearchCompletedEventHandler(object sender, dnsDelegatedSearchCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DNSDelegatedEntry[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DNSDelegatedEntry[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedGetByNameViewCompletedEventHandler(object sender, dnsDelegatedGetByNameViewCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedGetByNameViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedGetByNameViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DNSDelegatedEntry Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DNSDelegatedEntry)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedAddCompletedEventHandler(object sender, dnsDelegatedAddCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedListKeysCompletedEventHandler(object sender, dnsDelegatedListKeysCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedListKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedListKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DNSDelegatedKey[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DNSDelegatedKey[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedRemoveCompletedEventHandler(object sender, dnsDelegatedRemoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedAliasAddCompletedEventHandler(object sender, dnsDelegatedAliasAddCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedAliasAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedAliasAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void dnsDelegatedAliasRemoveCompletedEventHandler(object sender, dnsDelegatedAliasRemoveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class dnsDelegatedAliasRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal dnsDelegatedAliasRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}
